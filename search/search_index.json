{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"mkdocstrings","text":"<p>Automatic documentation from sources, for MkDocs. Come have a chat or ask questions on our Gitter channel.</p> <p>Features - Requirements - Installation - Quick usage</p> <p></p>"},{"location":"#features","title":"Features","text":"<ul> <li> <p>Language-agnostic:   just like MkDocs, mkdocstrings is written in Python but is language-agnostic.   It means you can use it with any programming language, as long as there is a   handler for it.   We currently have handlers   for the Crystal and Python languages.   Maybe you'd like to add another one to the list? </p> </li> <li> <p>Multiple themes support:   each handler can offer multiple themes. Currently, we offer the    Material theme    as well as basic support for the ReadTheDocs and MkDocs themes for the Python handler.</p> </li> <li> <p>Cross-references across pages: mkdocstrings makes it possible to reference headings in other Markdown files with the classic Markdown linking   syntax: <code>[identifier][]</code> or <code>[title][identifier]</code> -- and you don't need to remember which exact page this object was   on. This works for any heading that's produced by a mkdocstrings language handler, and you can opt to include   any Markdown heading into the global referencing scheme.</p> <p>Note: in versions prior to 0.15 all Markdown headers were included, but now you need to opt in.</p> </li> <li> <p>Cross-references across sites:   similarly to Sphinx's intersphinx extension,   mkdocstrings can reference API items from other libraries, given they provide an inventory and you load   that inventory in your MkDocs configuration.</p> </li> <li> <p>Inline injection in Markdown:   instead of generating Markdown files, mkdocstrings allows you to inject   documentation anywhere in your Markdown contents. The syntax is simple: <code>::: identifier</code> followed by a 4-spaces   indented YAML block. The identifier and YAML configuration will be passed to the appropriate handler   to collect and render documentation.</p> </li> <li> <p>Global and local configuration:   each handler can be configured globally in <code>mkdocs.yml</code>, and locally for each   \"autodoc\" instruction.</p> </li> <li> <p>Watch source code directories:   you can tell mkdocstrings to add directories to be watched by MkDocs when   serving the documentation, for auto-reload.</p> </li> <li> <p>Reasonable defaults:   you should be able to just drop the plugin in your configuration and enjoy your auto-generated docs.</p> </li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>With <code>pip</code>: <pre><code>pip install mkdocstrings\n</code></pre></p> <p>You can install support for specific languages using extras, for example:</p> <pre><code>pip install mkdocstrings[crystal,python]\n</code></pre> <p>See the available language handlers.</p> <p>With <code>conda</code>: <pre><code>conda install -c conda-forge mkdocstrings\n</code></pre></p>"},{"location":"#quick-usage","title":"Quick usage","text":"<pre><code># mkdocs.yml\ntheme:\nname: \"material\"\n\nplugins:\n- search\n- mkdocstrings\n</code></pre> <p>In one of your markdown files:</p> <pre><code># Reference\n\n::: my_library.my_module.my_class\n</code></pre> <p>See the Usage section of the docs for more examples!</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#0200-2023-01-19","title":"0.20.0 - 2023-01-19","text":"<p>Compare with 0.19.1</p>"},{"location":"changelog/#features","title":"Features","text":"<ul> <li>Add <code>enabled</code> configuration option (8cf117d by StefanBRas). Issue #478, PR #504</li> </ul>"},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Handle updating Jinja environment of multiple handlers (a6ea80c by David Patterson). Related PR #201, Issue #502, PR #507</li> </ul>"},{"location":"changelog/#code-refactoring","title":"Code Refactoring","text":"<ul> <li>Make <code>_load_inventory</code> accept lists as arguments (105ed82 by Sorin Sbarnea). Needed by PR mkdocstrings/python#49, PR #511</li> <li>Remove support for MkDocs &lt; 1.2 (we already depended on MkDocs &gt;= 1.2) (ac963c8 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0191-2022-12-13","title":"0.19.1 - 2022-12-13","text":"<p>Compare with 0.19.0</p>"},{"location":"changelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>Fix regular expression for Sphinx inventory parsing (348bdd5 by Luis Michaelis). Issue #496, PR #497</li> </ul>"},{"location":"changelog/#code-refactoring_1","title":"Code Refactoring","text":"<ul> <li>Small fixes to type annotations (9214b74 by Oleh Prypin). PR #470</li> <li>Report usage-based warnings as user-facing messages (03dd7a6 by Oleh Prypin). PR #464</li> </ul>"},{"location":"changelog/#0190-2022-05-28","title":"0.19.0 - 2022-05-28","text":"<p>Compare with 0.18.1</p>"},{"location":"changelog/#highlights","title":"Highlights","text":"<p>We decided to deprecate a few things to pave the way towards a more stable code base, bringing us closer to a v1.</p> <ul> <li>Selection and rendering options are now combined into a single   <code>options</code> key. Using the old keys will emit a deprecation warning.</li> <li>The <code>BaseCollector</code> and <code>BaseRenderer</code> classes are deprecated in favor   of <code>BaseHandler</code>, which merges their functionality. Using the old   classes will emit a deprecation warning.</li> </ul> <p>New versions of the Python handler and the legacy Python handler were also released in coordination with mkdocstrings 0.19. See their respective changelogs: python, python-legacy. Most notably, the Python handler gained the <code>members</code> and <code>filters</code> options that prevented many users to switch to it.</p> <p>mkdocstrings stopped depending directly on the legacy Python handler. It means you now have to explicitely depend on it, directly or through the extra provided by mkdocstrings, if you want to continue using it.</p>"},{"location":"changelog/#packaging-dependencies","title":"Packaging / Dependencies","text":"<ul> <li>Stop depending directly on mkdocstrings-python-legacy (9055d58 by Timoth\u00e9e Mazzucotelli). Issue #376</li> </ul>"},{"location":"changelog/#features_1","title":"Features","text":"<ul> <li>Pass config file path to handlers (cccebc4 by Timoth\u00e9e Mazzucotelli). Issue #311, PR #425</li> </ul>"},{"location":"changelog/#code-refactoring_2","title":"Code Refactoring","text":"<ul> <li>Support options / deprecated options mix-up (7c71f26 by Timoth\u00e9e Mazzucotelli).</li> <li>Deprecate watch feature in favor of MkDocs' built-in one (c20022e by Timoth\u00e9e Mazzucotelli).</li> <li>Log relative template paths if possible, instead of absolute (91f5f83 by Timoth\u00e9e Mazzucotelli).</li> <li>Deprecate <code>selection</code> and <code>rendering</code> YAML keys (3335310 by Timoth\u00e9e Mazzucotelli). PR #420</li> <li>Deprecate <code>BaseCollector</code> and <code>BaseRenderer</code> (eb822cb by Timoth\u00e9e Mazzucotelli). PR #413</li> </ul>"},{"location":"changelog/#0181-2022-03-01","title":"0.18.1 - 2022-03-01","text":"<p>Compare with 0.18.0</p>"},{"location":"changelog/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>Don't preemptively register identifiers as anchors (c7ac043 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0180-2022-02-06","title":"0.18.0 - 2022-02-06","text":"<p>Compare with 0.17.0</p>"},{"location":"changelog/#highlights_1","title":"Highlights","text":"<ul> <li>Python 3.6 support is dropped.</li> <li>We provide a new, experimental Python handler based on Griffe.   This new handler brings automatic cross-references for every annotation in your code,   including references to third-party libraries' APIs if they provide objects inventories   and you explicitely load them in <code>mkdocs.yml</code>.   See migration notes in the documentation.</li> <li>The \"legacy\" Python handler now lives in its own repository at https://github.com/mkdocstrings/python-legacy.</li> </ul>"},{"location":"changelog/#packaging-dependencies_1","title":"Packaging / Dependencies","text":"<ul> <li>Add Crystal extra, update Python extras versions (b8222b0 by Timoth\u00e9e Mazzucotelli). PR #374</li> <li>Update autorefs to actually required version (fc6c7f6 by Timoth\u00e9e Mazzucotelli).</li> <li>Drop Python 3.6 support (7205ac6 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#features_2","title":"Features","text":"<ul> <li>Allow unwrapping the <code>&lt;p&gt;</code> tag in <code>convert_markdown</code> filter (5351fc8 by Oleh Prypin). PR #369</li> <li>Support handlers spanning multiple locations (f42dfc6 by Timoth\u00e9e Mazzucotelli). PR #355</li> </ul>"},{"location":"changelog/#code-refactoring_3","title":"Code Refactoring","text":"<ul> <li>Prefix logs with the package name only (6c2b734 by Timoth\u00e9e Mazzucotelli). PR #375</li> <li>Extract the Python handler into its own repository (74371e4 by Timoth\u00e9e Mazzucotelli). PR #356</li> <li>Support Jinja2 3.1 (b377227 by Timoth\u00e9e Mazzucotelli). Issue #360, PR #361</li> <li>Find templates in new and deprecated namespaces (d5d5f18 by Timoth\u00e9e Mazzucotelli). PR #367</li> <li>Support loading handlers from the <code>mkdocstrings_handlers</code> namespace (5c22c6c by Timoth\u00e9e Mazzucotelli). PR #367</li> </ul>"},{"location":"changelog/#0170-2021-12-27","title":"0.17.0 - 2021-12-27","text":"<p>Compare with 0.16.2</p>"},{"location":"changelog/#features_3","title":"Features","text":"<ul> <li>Add <code>show_signature</code> rendering option (024ee82 by Will Da Silva). Issue #341, PR #342</li> <li>Support Keyword Args and Yields sections (1286427 by Timoth\u00e9e Mazzucotelli). Issue #205 and #324, PR #331</li> </ul>"},{"location":"changelog/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>Do minimum work when falling back to re-collecting an object to get its anchor (f6cf570 by Timoth\u00e9e Mazzucotelli). Issue #329, PR #330</li> </ul>"},{"location":"changelog/#code-refactoring_4","title":"Code Refactoring","text":"<ul> <li>Return multiple identifiers from fallback method (78c498c by Timoth\u00e9e Mazzucotelli). Issue mkdocstrings/autorefs#11, PR #350</li> </ul>"},{"location":"changelog/#0162-2021-10-04","title":"0.16.2 - 2021-10-04","text":"<p>Compare with 0.16.1</p>"},{"location":"changelog/#dependencies","title":"Dependencies","text":"<ul> <li>Support <code>pymdown-extensions</code> v9.x (0831343 by Ofek Lev and 38b22ec by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0161-2021-09-23","title":"0.16.1 - 2021-09-23","text":"<p>Compare with 0.16.0</p>"},{"location":"changelog/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>Fix ReadTheDocs \"return\" template (598621b by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#0160-2021-09-20","title":"0.16.0 - 2021-09-20","text":"<p>Compare with 0.15.0</p>"},{"location":"changelog/#features_4","title":"Features","text":"<ul> <li>Add a rendering option to change the sorting of members (b1fff8b by Joe Rickerby). Issue #114, PR #274</li> <li>Add option to show Python base classes (436f550 by Brian Koropoff). Issue #269, PR #297</li> <li>Support loading external Python inventories in Sphinx format (a8418cb by Oleh Prypin). PR #287</li> <li>Support loading external inventories and linking to them (8b675f4 by Oleh Prypin). PR #277</li> <li>Very basic support for MkDocs theme (974ca90 by Oleh Prypin). PR #272</li> <li>Generate objects inventory (14ed959 and bbd85a9 by Timoth\u00e9e Mazzucotelli). Issue #251, PR #253</li> </ul>"},{"location":"changelog/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>Don't render empty code blocks for missing type annotations (d2e9e1e by Oleh Prypin).</li> <li>Fix custom handler not being used (6dcf342 by Timoth\u00e9e Mazzucotelli). Issue #259, PR #263</li> <li>Don't hide <code>setup_commands</code> errors (92418c4 by Gabriel V\u00eejial\u0103). PR #258</li> </ul>"},{"location":"changelog/#code-refactoring_5","title":"Code Refactoring","text":"<ul> <li>Move writing extra files to an earlier stage in the build (3890ab5 by Oleh Prypin). PR #275</li> </ul>"},{"location":"changelog/#0152-2021-06-09","title":"0.15.2 - 2021-06-09","text":"<p>Compare with 0.15.1</p>"},{"location":"changelog/#packaging","title":"Packaging","text":"<ul> <li>MkDocs default schema needs to be obtained differently now (b3e122b by Oleh Prypin). PR #273</li> <li>Compatibility with MkDocs 1.2: livereload isn't guaranteed now (36e8024 by Oleh Prypin). PR #294</li> </ul>"},{"location":"changelog/#0151-2021-05-16","title":"0.15.1 - 2021-05-16","text":"<p>Compare with 0.15.0</p>"},{"location":"changelog/#bug-fixes_6","title":"Bug Fixes","text":"<ul> <li>Prevent error during parallel installations (fac2c71 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#packaging_1","title":"Packaging","text":"<ul> <li>Support the upcoming major Jinja and MarkupSafe releases (bb4f9de by Oleh Prypin). PR #283</li> <li>Accept a higher version of mkdocs-autorefs (c8de08e by Oleh Prypin). PR #282</li> </ul>"},{"location":"changelog/#0150-2021-02-28","title":"0.15.0 - 2021-02-28","text":"<p>Compare with 0.14.0</p>"},{"location":"changelog/#breaking-changes","title":"Breaking Changes","text":"<p>The following items are possible breaking changes:</p> <ul> <li>Cross-linking to arbitrary headings now requires to opt-in to the autorefs plugin,   which is installed as a dependency of mkdocstrings.   See Cross-references to any Markdown heading.</li> <li>mkdocstrings now respects your configured code highlighting method,   so if you are using the CodeHilite extension, the <code>.highlight</code> CSS class in the rendered HTML will become <code>.codehilite</code>.   So make sure to adapt your extra CSS accordingly. Or just switch to using pymdownx.highlight, it's better supported by mkdocstrings anyway.   See Syntax highlighting.</li> <li>Most of the CSS rules that mkdocstrings used to recommend for manual addition, now become mandatory (auto-injected into the site). This shouldn't break any of your styles, but you are welcome to remove the now-redundant lines that you had copied into <code>extra_css</code>, similarly to this diff.</li> </ul>"},{"location":"changelog/#features_5","title":"Features","text":"<ul> <li>Nicer-looking error outputs - no tracebacks from mkdocstrings (6baf720 by Oleh Prypin). PR #230</li> <li>Let handlers add CSS to the pages, do so for Python handler (05c7a3f by Oleh Prypin). Issue #189, PR #218</li> <li>Allow linking to an object heading not only by its canonical identifier, but also by its possible aliases (4789950 by Oleh Prypin). PR #217</li> </ul>"},{"location":"changelog/#bug-fixes_7","title":"Bug Fixes","text":"<ul> <li>Propagate the CSS class to inline highlighting as well (c7d80e6 by Oleh Prypin). PR #245</li> <li>Don't double-escape characters in highlighted headings (6357144 by Oleh Prypin). Issue #228, PR #241</li> </ul>"},{"location":"changelog/#code-refactoring_6","title":"Code Refactoring","text":"<ul> <li>Use the autorefs plugin from its new external location (e2d74ef by Oleh Prypin). PR #235</li> <li>Split out Markdown extensions from <code>handlers</code> to <code>handlers.rendering</code> (7533852 by Oleh Prypin). PR #233</li> <li>Theme-agnostic code highlighting, respecting configs (f9ea009 by Oleh Prypin). PR #202</li> <li>Split out autorefs plugin, make it optional (fc67656 by Oleh Prypin). PR #220</li> <li>Remove the extra wrapper div from the final doc (7fe438c by Oleh Prypin). PR #209</li> <li>Don't re-parse the whole subdoc, expose only headings (15f84f9 by Oleh Prypin). PR #209</li> <li>Actually exclude hidden headings from the doc (0fdb082 by Oleh Prypin). PR #209</li> </ul>"},{"location":"changelog/#0140-2021-01-06","title":"0.14.0 - 2021-01-06","text":"<p>Compare with 0.13.6</p> <p>Special thanks to Oleh @oprypin Prypin who did an amazing job (this is a euphemism) at improving mkdocstrings, fixing hard-to-fix bugs with clever solutions, implementing great new features and refactoring the code for better performance and readability! Thanks Oleh!</p>"},{"location":"changelog/#bug-fixes_8","title":"Bug Fixes","text":"<ul> <li>Fix double code tags (e84d401 by Timoth\u00e9e Mazzucotelli).</li> <li>Don't mutate the original Markdown config for permalinks (8f6b163 by Oleh Prypin).</li> <li>Preserve text immediately before an autodoc (07466fa by Oleh Prypin). PR #207</li> <li>Remove <code>href</code> attributes from headings in templates (d5602ff by Oleh Prypin). PR #204</li> <li>Don't let <code>toc</code> extension append its permalink twice (a154f5c by Oleh Prypin). PR #203</li> <li>Fix undefined entity for <code>&amp;para;</code> (2c29211 by Timoth\u00e9e Mazzucotelli).</li> <li>Make ids of Markdown sub-documents prefixed with the parent item id (d493d33 by Oleh Prypin). Issue #186 and #193, PR #199</li> <li>More lenient regex for data-mkdocstrings-identifier (dcfec8e by Oleh Prypin).</li> <li>Shift Markdown headings according to the current <code>heading_level</code> (13f41ae by Oleh Prypin). Issue #192, PR #195</li> <li>Fix footnotes appearing in all following objects (af24bc2 by Oleh Prypin). Issue #186, PR #195</li> <li>Fix cross-references from the root index page (9c9f2a0 by Oleh Prypin). Issue #184, PR #185</li> <li>Fix incorrect argument name passed to Markdown (10ce502 by Timoth\u00e9e Mazzucotelli).</li> <li>Fix error when a digit immediately follows a code tag (9b92341 by Oleh Prypin). Issue #169, PR #175</li> <li>Detecting paths relative to template directory in logging (a50046b by Oleh Prypin). Issue #166</li> </ul>"},{"location":"changelog/#code-refactoring_7","title":"Code Refactoring","text":"<ul> <li>BlockProcessor already receives strings, use them as such (bcf7da9 by Oleh Prypin).</li> <li>Remove some unused code (8504084 by Oleh Prypin). PR #206</li> <li>Improve XML parsing error handling (ad86410 by Timoth\u00e9e Mazzucotelli).</li> <li>Explicitly use MarkupSafe (6b9ebe7 by Oleh Prypin).</li> <li>Split out the handler cache, expose it through the plugin (6453026 by Oleh Prypin). Issue #179, PR #191</li> <li>Use ChainMap instead of copying dicts (c634d2c by Oleh Prypin). PR #171</li> <li>Rename logging to loggers to avoid confusion (7a119cc by Timoth\u00e9e Mazzucotelli).</li> <li>Simplify logging (409f93e by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#features_6","title":"Features","text":"<ul> <li>Allow specifying <code>heading_level</code> as a Markdown heading (10efc28 by Oleh Prypin). PR #170</li> <li>Allow any characters in identifiers (7ede68a by Oleh Prypin). PR #174</li> <li>Allow namespace packages for handlers (39b0465 by Timoth\u00e9e Mazzucotelli).</li> <li>Add template debugging/logging (33b32c1 by Timoth\u00e9e Mazzucotelli).</li> <li>Add initial support for the ReadTheDocs theme (1028115 by Timoth\u00e9e Mazzucotelli). Issue #107, PR #159</li> <li>Add option to show type annotations in signatures (f94ce9b by Timoth\u00e9e Mazzucotelli). Issue #106</li> </ul>"},{"location":"changelog/#packaging_2","title":"Packaging","text":"<ul> <li>Accept verions of <code>pytkdocs</code> up to 0.10.x (see changelog).</li> </ul>"},{"location":"changelog/#performance-improvements","title":"Performance Improvements","text":"<ul> <li>Call <code>update_env</code> only once per <code>Markdown</code> instance (b198c74 by Oleh Prypin). PR #201</li> <li>Disable Jinja's <code>auto_reload</code> to reduce disk reads (3b28c58 by Oleh Prypin). PR #200</li> <li>Rework autorefs replacement to not re-parse the final HTML (22a9e4b by Oleh Prypin). Issue #187, PR #188</li> </ul>"},{"location":"changelog/#0136-2020-09-28","title":"0.13.6 - 2020-09-28","text":"<p>Compare with 0.13.5</p>"},{"location":"changelog/#bug-fixes_9","title":"Bug Fixes","text":"<ul> <li>Fix rendering when clicking on hidden toc entries (2af4d31 by Timoth\u00e9e Mazzucotelli). Issue #60.</li> </ul>"},{"location":"changelog/#0135-2020-09-28","title":"0.13.5 - 2020-09-28","text":"<p>Compare with 0.13.4</p>"},{"location":"changelog/#packaging_3","title":"Packaging","text":"<ul> <li>Accept <code>pytkdocs</code> version up to 0.9.x (changelog).</li> </ul>"},{"location":"changelog/#0134-2020-09-25","title":"0.13.4 - 2020-09-25","text":"<p>Compare with 0.13.3</p>"},{"location":"changelog/#bug-fixes_10","title":"Bug Fixes","text":"<ul> <li>Bring back arbitrary <code>**config</code> to Python handler (fca7d4c by Florimond Manca). Issue #154, PR #155</li> </ul>"},{"location":"changelog/#0133-2020-09-25","title":"0.13.3 - 2020-09-25","text":"<p>Compare with 0.13.2</p>"},{"location":"changelog/#packaging_4","title":"Packaging","text":"<ul> <li>Accept <code>pytkdocs</code> version up to 0.8.x (changelog).</li> </ul>"},{"location":"changelog/#0132-2020-09-08","title":"0.13.2 - 2020-09-08","text":"<p>Compare with 0.13.1</p>"},{"location":"changelog/#bug-fixes_11","title":"Bug Fixes","text":"<ul> <li>Fix relative URLs when <code>use_directory_urls</code> is false (421d189 by Timoth\u00e9e Mazzucotelli). References: #149</li> </ul>"},{"location":"changelog/#0131-2020-09-03","title":"0.13.1 - 2020-09-03","text":"<p>Compare with 0.13.0</p>"},{"location":"changelog/#bug-fixes_12","title":"Bug Fixes","text":"<ul> <li>Use relative links for cross-references (9c77f1f by Timoth\u00e9e Mazzucotelli). References: #144, #147</li> </ul>"},{"location":"changelog/#0130-2020-08-21","title":"0.13.0 - 2020-08-21","text":"<p>Compare with 0.12.2</p>"},{"location":"changelog/#bug-fixes_13","title":"Bug Fixes","text":"<ul> <li>Accept dashes in module names (fcf79d0 by Timoth\u00e9e Mazzucotelli). References: #140</li> </ul>"},{"location":"changelog/#features_7","title":"Features","text":"<ul> <li>Add option to show full path of direct members only (d1b9401 by Aaron Dunmore). References: #134, #136</li> </ul>"},{"location":"changelog/#packaging_5","title":"Packaging","text":"<ul> <li>Accept <code>pymdown-extensions</code> versions up to 0.8.x (see release notes) (178d48d by Hugo van Kemenade). PR #146</li> </ul>"},{"location":"changelog/#0122-2020-07-24","title":"0.12.2 - 2020-07-24","text":"<p>Compare with 0.12.1</p>"},{"location":"changelog/#packaging_6","title":"Packaging","text":"<ul> <li>Accept <code>pytkdocs</code> version up to 0.7.x (changelog).</li> </ul>"},{"location":"changelog/#0121-2020-07-07","title":"0.12.1 - 2020-07-07","text":"<p>Compare with 0.12.0</p>"},{"location":"changelog/#bug-fixes_14","title":"Bug Fixes","text":"<ul> <li>Fix HTML-escaped sequence parsing as XML (db297f1 by Timoth\u00e9e Mazzucotelli).</li> <li>Allow running mkdocs from non-default interpreter (283dd7b by Jared Khan).</li> </ul>"},{"location":"changelog/#0120-2020-06-14","title":"0.12.0 - 2020-06-14","text":"<p>Compare with 0.11.4</p>"},{"location":"changelog/#features_8","title":"Features","text":"<ul> <li>Support attributes section in Google-style docstrings (8300253 by Timoth\u00e9e Mazzucotelli). References: #88</li> <li>Support examples section in Google-style docstrings (650c754 by Iago Gonz\u00e1lez). References: #112</li> </ul>"},{"location":"changelog/#packaging_7","title":"Packaging","text":"<ul> <li>Accept <code>pytkdocs</code> version up to 0.6.x (changelog).</li> </ul>"},{"location":"changelog/#0114-2020-06-08","title":"0.11.4 - 2020-06-08","text":"<p>Compare with 0.11.3</p>"},{"location":"changelog/#packaging_8","title":"Packaging","text":"<ul> <li>Accept <code>pytkdocs</code> version up to 0.5.x (changelog).   If it breaks your docs, please open issues on <code>pytkdocs</code>' bug-tracker,   or pin <code>pytkdocs</code> version to while waiting for bug fixes &lt;0.5.0 .</li> </ul>"},{"location":"changelog/#0113-2020-06-07","title":"0.11.3 - 2020-06-07","text":"<p>Compare with 0.11.2</p>"},{"location":"changelog/#bug-fixes_15","title":"Bug Fixes","text":"<ul> <li>Support custom theme directory configuration (1243cf6 by Abhishek Thakur). References: #120, #121</li> </ul>"},{"location":"changelog/#0112-2020-05-20","title":"0.11.2 - 2020-05-20","text":"<p>Compare with 0.11.1</p>"},{"location":"changelog/#packaging_9","title":"Packaging","text":"<ul> <li>Increase <code>pytkdocs</code> version range to accept 0.4.0   (changelog).</li> </ul>"},{"location":"changelog/#0111-2020-05-14","title":"0.11.1 - 2020-05-14","text":"<p>Compare with 0.11.0</p>"},{"location":"changelog/#bug-fixes_16","title":"Bug Fixes","text":"<ul> <li>Fix integration with mkdocs logging une bonne fois pour toute (3293cbf by Timoth\u00e9e Mazzucotelli).</li> <li>Discard setup commands stdout (ea44cea by Timoth\u00e9e Mazzucotelli). References: #91</li> <li>Use the proper python executable to start subprocesses (9fe3b39 by Reece Dunham). References: #91, #103</li> </ul>"},{"location":"changelog/#0110-2020-04-23","title":"0.11.0 - 2020-04-23","text":"<p>Compare with 0.10.3</p>"},{"location":"changelog/#bug-fixes_17","title":"Bug Fixes","text":"<ul> <li>Properly raise on errors (respect strict mode) (2097208 by Timoth\u00e9e Mazzucotelli). Related issues/PRs: #86</li> <li>Hook properly to MkDocs logging (b23daed by Timoth\u00e9e Mazzucotelli). Related issues/PRs: #86</li> </ul>"},{"location":"changelog/#features_9","title":"Features","text":"<ul> <li>Add <code>setup_commands</code> option to python handler (599f8e5 by Ross Mechanic). Related issues/PRs: #89, #90</li> <li>Add option to allow overriding templates (7360021 by Mika\u00ebl Capelle). Related issues/PRs: #59, #82</li> </ul>"},{"location":"changelog/#0103-2020-04-10","title":"0.10.3 - 2020-04-10","text":"<p>Compare with 0.10.2</p>"},{"location":"changelog/#bug-fixes_18","title":"Bug Fixes","text":"<ul> <li>Handle <code>site_url</code> not being defined (9fb4a9b by Timoth\u00e9e Mazzucotelli). Related issues/PRs: #77</li> </ul>"},{"location":"changelog/#packaging_10","title":"Packaging","text":"<p>This version increases the accepted range of versions for the <code>pytkdocs</code> dependency to <code>&gt;=0.2.0, &lt;0.4.0</code>. The <code>pytkdocs</code> project just released version 0.3.0 which:</p> <ul> <li>adds support for complex markup in docstrings sections items descriptions</li> <li>adds support for different indentations in docstrings sections (tabulations or less/more than 4 spaces)</li> <li>fixes docstring parsing for arguments whose names start with <code>*</code>, like <code>*args</code> and <code>**kwargs</code></li> </ul>"},{"location":"changelog/#0102-2020-04-07","title":"0.10.2 - 2020-04-07","text":"<p>Compare with 0.10.1</p>"},{"location":"changelog/#packaging_11","title":"Packaging","text":"<p>This version increases the accepted range of versions for the <code>pymdown-extensions</code> dependency, as well as for the <code>mkdocs-material</code> development dependency. Indeed, both these projects recently released major versions 7 and 5 respectively. Users who wish to use these new versions will be able to. See issue #74.</p>"},{"location":"changelog/#0101-2020-04-03","title":"0.10.1 - 2020-04-03","text":"<p>Compare with 0.10.0</p>"},{"location":"changelog/#bug-fixes_19","title":"Bug Fixes","text":"<ul> <li>Fix jinja2 error for jinja2 &lt; 2.11 (387f970 by Timoth\u00e9e Mazzucotelli). Related issues/PRs: #67, #72</li> <li>Fix missing dependency pymdown-extensions (648b99d by Timoth\u00e9e Mazzucotelli). Related issues/PRs: #66</li> <li>Fix heading level of hidden toc entries (475cc62 by Timoth\u00e9e Mazzucotelli). Related issues/PRs: #65</li> <li>Fix rendering signatures containing keyword_only (c6c5add by Timoth\u00e9e Mazzucotelli). Related issues/PRs: #68</li> </ul>"},{"location":"changelog/#0100-2020-03-27","title":"0.10.0 - 2020-03-27","text":"<p>Compare with 0.9.1</p>"},{"location":"changelog/#features_10","title":"Features","text":"<ul> <li>Prepare for new <code>pytkdocs</code> version (336421a).   Add options <code>filters</code> and <code>members</code> to the Python collector to reflect the new <code>pytkdocs</code> options.   See the default configuration of the Python collector.</li> </ul>"},{"location":"changelog/#091-2020-03-21","title":"0.9.1 - 2020-03-21","text":"<p>Compare with 0.9.0</p>"},{"location":"changelog/#bug-fixes_20","title":"Bug fixes","text":"<ul> <li>Fix cross-references when deploying to GitHub pages (36f804b).</li> </ul>"},{"location":"changelog/#090-2020-03-21","title":"0.9.0 - 2020-03-21","text":"<p>Compare with 0.8.0</p> <p>This version is a big refactor. We will just list the new features without pointing to particular commits. The documentation rendering looks slightly different, and should be better than before. No identified breaking changes for end-users.</p>"},{"location":"changelog/#features_11","title":"Features","text":"<ul> <li>Language agnostic: we moved the code responsible for loading Python documentation into a new project,   <code>pytkdocs</code>, and implemented a \"handlers\" logic, effectively allowing to   support any given language. Waiting for your handlers contributions !</li> <li>Multiple themes support: handlers can offer templates for multiple <code>mkdocs</code> themes.</li> <li>Better cross-references: cross-references now not only work between documented objects (between all languages,   given the objects' identifiers are unique), but also for every heading of your Markdown pages.</li> <li>Configuration options: the rendering of Python documentation can now be configured,   (globally and locally thanks to the handlers system),   check the docs!   Also see the recommended CSS.</li> <li>Proper logging messages: <code>mkdocstrings</code> now logs debug, warning and error messages, useful when troubleshooting.</li> </ul>"},{"location":"changelog/#bug-fixes_21","title":"Bug fixes","text":"<ul> <li>Various fixes and better error handling.</li> </ul>"},{"location":"changelog/#080-2020-03-04","title":"0.8.0 - 2020-03-04","text":"<p>Compare with 0.7.2</p>"},{"location":"changelog/#breaking-changes_1","title":"Breaking Changes","text":"<ul> <li>Be compatible with Mkdocs &gt;= 1.1 (5a974a4).   This is a breaking change as we're not compatible with versions of Mkdocs below 1.1 anymore.   If you cannot upgrade Mkdocs to 1.1, pin mkdocstrings' version to 0.7.2.</li> </ul>"},{"location":"changelog/#072-2020-03-04","title":"0.7.2 - 2020-03-04","text":"<p>Compare with 0.7.1</p>"},{"location":"changelog/#bug-fixes_22","title":"Bug Fixes","text":"<ul> <li>Catch <code>OSError</code> when trying to get source lines (8e8d604).</li> <li>Do not render signature empty sentinel (16dfd73).</li> <li>Fix for nested classes and their attributes (7fef903).</li> <li>Fix <code>relative_file_path</code> method (52715ad).</li> <li>Wrap file path in backticks to escape it (2525f39).</li> </ul>"},{"location":"changelog/#071-2020-02-18","title":"0.7.1 - 2020-02-18","text":"<p>Compare with 0.7.0</p>"},{"location":"changelog/#bug-fixes_23","title":"Bug Fixes","text":"<ul> <li>Replace literal slash with os.sep for Windows compatibility (70f9af5).</li> </ul>"},{"location":"changelog/#070-2020-01-13","title":"0.7.0 - 2020-01-13","text":"<p>Compare with 0.6.1</p>"},{"location":"changelog/#bug-fixes_24","title":"Bug Fixes","text":"<ul> <li>Don't mark args or kwargs as required (4049d6f).</li> <li>Filter submodules (7b11095).</li> </ul>"},{"location":"changelog/#code-refactoring_8","title":"Code Refactoring","text":"<ul> <li>Don't guess lang in generated docs (db4f60a).</li> <li>Render at HTML step with custom markdown converter (9b5a3e1).</li> </ul>"},{"location":"changelog/#features_12","title":"Features","text":"<ul> <li>Change forward ref to ref, fix optional unions (2f0bfaa).</li> <li>Discover package submodules (231062a).</li> <li>Implement watched source code (hacks) (4a67953).</li> </ul>"},{"location":"changelog/#061-2020-01-02","title":"0.6.1 - 2020-01-02","text":"<p>Compare with 0.6.0</p>"},{"location":"changelog/#bug-fixes_25","title":"Bug Fixes","text":"<ul> <li>Break docstring discarding loop if found (5a17fec).</li> <li>Fix discarding docstring (143f7cb).</li> <li>Fix getting annotation from nodes (ecde72b).</li> <li>Fix various things (affbf06).</li> </ul>"},{"location":"changelog/#code-refactoring_9","title":"Code Refactoring","text":"<ul> <li>Break as soon as we find the same attr in a parent class while trying to discard the docstring (65d7908).</li> <li>Split Docstring.parse method to improve readability (2226e2d).</li> </ul>"},{"location":"changelog/#060-2019-12-28","title":"0.6.0 - 2019-12-28","text":"<p>Compare with 0.5.0</p>"},{"location":"changelog/#bug-fixes_26","title":"Bug Fixes","text":"<ul> <li>Fix GenericMeta import error on Python 3.7+ (febf2b9).</li> </ul>"},{"location":"changelog/#code-refactoring_10","title":"Code Refactoring","text":"<ul> <li>More classes. Still ugly code though :'( (f41c119).</li> <li>Split into more modules (f1872a4).</li> <li>Use Object subclasses (40dd106).</li> </ul>"},{"location":"changelog/#050-2019-12-22","title":"0.5.0 - 2019-12-22","text":"<p>Compare with 0.4.0</p>"},{"location":"changelog/#features_13","title":"Features","text":"<ul> <li>Use divs in HTML contents to ease styling (2a36a0e).</li> </ul>"},{"location":"changelog/#040-2019-12-22","title":"0.4.0 - 2019-12-22","text":"<p>Compare with 0.3.0</p>"},{"location":"changelog/#features_14","title":"Features","text":"<ul> <li>Parse docstrings Google-style blocks, get types from signature (5af0c7b).</li> </ul>"},{"location":"changelog/#030-2019-12-21","title":"0.3.0 - 2019-12-21","text":"<p>Compare with 0.2.0</p>"},{"location":"changelog/#features_15","title":"Features","text":"<ul> <li>Allow object referencing in docstrings (2dd50c0).</li> </ul>"},{"location":"changelog/#020-2019-12-15","title":"0.2.0 - 2019-12-15","text":"<p>Compare with 0.1.0</p>"},{"location":"changelog/#misc","title":"Misc","text":"<ul> <li>Refactor, features, etc. (111fa85).</li> </ul>"},{"location":"changelog/#010-2019-12-12","title":"0.1.0 - 2019-12-12","text":"<p>Compare with first commit</p>"},{"location":"changelog/#misc_1","title":"Misc","text":"<ul> <li>Clean up (delete unused files) (c227043).</li> <li>Clean up unused makefile rules (edc01e9).</li> <li>Initial commit (f1dd8fb).</li> <li>Update readme (ae56bdd).</li> <li>Add plugin (6ed5cb1).</li> <li>First PoC, needs better theming (18a00b9).</li> <li>Get attributes docstrings (7838fff).</li> <li>Refactor (f68f1a8).</li> </ul>"},{"location":"code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic   address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code_of_conduct/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at pawamoy@pm.me. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.</p> <p>Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at http://contributor-covenant.org/version/1/4</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p>"},{"location":"contributing/#environment-setup","title":"Environment setup","text":"<p>Nothing easier!</p> <p>Fork and clone the repository, then:</p> <pre><code>cd mkdocstrings\nmake setup\n</code></pre> <p>Note</p> <p> If it fails for some reason, you'll need to install PDM manually.</p> <p>You can install it with:</p> <pre><code>python3 -m pip install --user pipx\npipx install pdm\n</code></pre> <p>Now you can try running <code>make setup</code> again, or simply <code>pdm install</code>.</p> <p>You now have the dependencies installed.</p> <p>Run <code>make help</code> to see all the available actions!</p>"},{"location":"contributing/#tasks","title":"Tasks","text":"<p>This project uses duty to run tasks. A Makefile is also provided. The Makefile will try to run certain tasks on multiple Python versions. If for some reason you don't want to run the task on multiple Python versions, you can do one of the following:</p> <ol> <li><code>export PYTHON_VERSIONS=</code>: this will run the task    with only the current Python version</li> <li>run the task directly with <code>pdm run duty TASK</code></li> </ol> <p>The Makefile detects if a virtual environment is activated, so <code>make</code> will work the same with the virtualenv activated or not.</p>"},{"location":"contributing/#development","title":"Development","text":"<p>As usual:</p> <ol> <li>create a new branch: <code>git checkout -b feature-or-bugfix-name</code></li> <li>edit the code and/or the documentation</li> </ol> <p>Before committing:</p> <ol> <li>run <code>make format</code> to auto-format the code</li> <li>run <code>make check</code> to check everything (fix any warning)</li> <li>run <code>make test</code> to run the tests (fix any issue)</li> <li>if you updated the documentation or the project dependencies:<ol> <li>run <code>make docs-serve</code></li> <li>go to http://localhost:8000 and check that everything looks good</li> </ol> </li> <li>follow our commit message convention</li> </ol> <p>If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during the review.</p> <p>Don't bother updating the changelog, we will take care of this.</p>"},{"location":"contributing/#commit-message-convention","title":"Commit message convention","text":"<p>Commits messages must follow the Angular style:</p> <pre><code>&lt;type&gt;[(scope)]: Subject\n\n[Body]\n</code></pre> <p>Scope and body are optional. Type can be:</p> <ul> <li><code>build</code>: About packaging, building wheels, etc.</li> <li><code>chore</code>: About packaging or repo/files management.</li> <li><code>ci</code>: About Continuous Integration.</li> <li><code>docs</code>: About documentation.</li> <li><code>feat</code>: New feature.</li> <li><code>fix</code>: Bug fix.</li> <li><code>perf</code>: About performance.</li> <li><code>refactor</code>: Changes that are not features or bug fixes.</li> <li><code>style</code>: A change in code style/format.</li> <li><code>tests</code>: About tests.</li> </ul> <p>Subject (and body) must be valid Markdown. If you write a body, please add issues references at the end:</p> <pre><code>Body.\n\nReferences: #10, #11.\nFixes #15.\n</code></pre>"},{"location":"contributing/#pull-requests-guidelines","title":"Pull requests guidelines","text":"<p>Link to any related issue in the Pull Request message.</p> <p>During the review, we recommend using fixups:</p> <pre><code># SHA is the SHA of the commit you want to fix\ngit commit --fixup=SHA\n</code></pre> <p>Once all the changes are approved, you can squash your commits:</p> <pre><code>git rebase -i --autosquash master\n</code></pre> <p>And force-push:</p> <pre><code>git push -f\n</code></pre> <p>If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.</p>"},{"location":"credits/","title":"Credits","text":"<p>These projects were used to build <code>mkdocstrings</code>. Thank you!</p> <p><code>python</code> | <code>pdm</code> | <code>copier-pdm</code></p>"},{"location":"credits/#exec-0--runtime-dependencies","title":"Runtime dependencies","text":"Project Summary Version (accepted) Version (last resolved) License <code>astunparse</code> An AST unparser for Python <code>&gt;=1.6; python_version &lt; \"3.9\"</code> <code>1.6.3</code> ? <code>cached-property</code> A decorator for caching properties in classes. <code>1.5.2</code> ? <code>click</code> Composable command line interface toolkit <code>&gt;=7.0</code> <code>8.1.3</code> BSD-3-Clause <code>colorama</code> Cross-platform colored terminal text. <code>&gt;=0.4; platform_system == \"Windows\"</code> <code>0.4.6</code> BSD License <code>ghp-import</code> Copy your docs directly to the gh-pages branch. <code>&gt;=1.0</code> <code>2.1.0</code> Apache Software License <code>griffe</code> Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API. <code>&gt;=0.24</code> <code>0.25.3</code> ISC <code>importlib-metadata</code> Read metadata from Python packages <code>&gt;=4.4; python_version &lt; \"3.10\"</code> <code>4.13.0</code> ? <code>jinja2</code> A very fast and expressive template engine. <code>&gt;=2.11.1</code> <code>3.1.2</code> BSD-3-Clause <code>markdown</code> Python implementation of Markdown. <code>&gt;=3.3</code> <code>3.3.7</code> BSD License <code>markdown-callouts</code> Markdown extension: a classier syntax for admonitions <code>&gt;=0.1.0</code> <code>0.3.0</code> MIT <code>markupsafe</code> Safely add untrusted strings to HTML/XML markup. <code>&gt;=1.1</code> <code>2.1.2</code> BSD-3-Clause <code>mergedeep</code> A deep merge function for \ud83d\udc0d. <code>&gt;=1.3.4</code> <code>1.3.4</code> MIT License <code>mkdocs</code> Project documentation with Markdown. <code>&gt;=1.2</code> <code>1.4.2</code> BSD License <code>mkdocs-autorefs</code> Automatically link across pages in MkDocs. <code>&gt;=0.3.1</code> <code>0.4.1</code> ISC License (ISCL) <code>mkdocstrings-crystal</code> Crystal language doc generator for mkdocstrings <code>&gt;=0.3.4</code> <code>0.3.5</code> ? <code>mkdocstrings-python</code> A Python handler for mkdocstrings. <code>&gt;=0.5.2</code> <code>0.8.3</code> ISC <code>mkdocstrings-python-legacy</code> A legacy Python handler for mkdocstrings. <code>&gt;=0.2.1</code> <code>0.2.3</code> ? <code>packaging</code> Core utilities for Python packages <code>&gt;=20.5</code> <code>21.3</code> BSD-2-Clause or Apache-2.0 <code>pymdown-extensions</code> Extension pack for Python Markdown. <code>&gt;=6.3</code> <code>9.9.1</code> MIT License <code>pyparsing</code> pyparsing module - Classes and methods to define and execute parsing grammars <code>!=3.0.5,&gt;=2.0.2</code> <code>3.0.9</code> MIT License <code>python-dateutil</code> Extensions to the standard Python datetime module <code>&gt;=2.8.1</code> <code>2.8.2</code> Dual License <code>pytkdocs</code> Load Python objects documentation. <code>&gt;=0.14</code> <code>0.16.1</code> ? <code>pyyaml</code> YAML parser and emitter for Python <code>&gt;=5.1</code> <code>6.0</code> MIT <code>pyyaml-env-tag</code> A custom YAML tag for referencing environment variables in YAML files. <code>&gt;=0.1</code> <code>0.1</code> MIT License <code>six</code> Python 2 and 3 compatibility utilities <code>&lt;2.0,&gt;=1.6.1</code> <code>1.16.0</code> MIT <code>typing-extensions</code> Backported and Experimental Type Hints for Python 3.7+ <code>&gt;=3.10; python_version &lt; \"3.8\"</code> <code>4.4.0</code> Python Software Foundation License <code>watchdog</code> Filesystem events monitoring <code>&gt;=2.0</code> <code>2.2.1</code> Apache License 2.0 <code>wheel</code> A built-package format for Python <code>&lt;1.0,&gt;=0.23.0</code> <code>0.38.4</code> ? <code>zipp</code> Backport of pathlib-compatible object wrapper for zip files <code>&gt;=0.5</code> <code>3.11.0</code> ?"},{"location":"credits/#exec-0--development-dependencies","title":"Development dependencies","text":"Project Summary Version (accepted) Version (last resolved) License <code>alabaster</code> A configurable sidebar-enabled Sphinx theme <code>&lt;0.8,&gt;=0.7</code> <code>0.7.13</code> BSD License <code>ansimarkup</code> Produce colored terminal text with an xml-like markup <code>~=1.4</code> <code>1.5.0</code> Revised BSD License <code>astor</code> Read/rewrite/write Python ASTs <code>&gt;=0.8</code> <code>0.8.1</code> BSD-3-Clause <code>attrs</code> Classes Without Boilerplate <code>&gt;=19.2.0</code> <code>22.2.0</code> MIT <code>autoflake</code> Removes unused imports and unused variables <code>&gt;=1.4</code> <code>1.7.8</code> MIT <code>babel</code> Internationalization utilities <code>&gt;=2.9</code> <code>2.11.0</code> BSD <code>bandit</code> Security oriented static analyser for python code. <code>&gt;=1.7.3</code> <code>1.7.4</code> Apache-2.0 license <code>black</code> The uncompromising code formatter. <code>&gt;=21.10b0</code> <code>23.1a1</code> MIT <code>cached-property</code> A decorator for caching properties in classes. <code>~=1.5; python_version &lt; \"3.8\"</code> <code>1.5.2</code> ? <code>certifi</code> Python package for providing Mozilla's CA Bundle. <code>&gt;=2017.4.17</code> <code>2022.12.7</code> MPL-2.0 <code>charset-normalizer</code> The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. <code>&lt;4,&gt;=2</code> <code>3.0.1</code> MIT <code>click</code> Composable command line interface toolkit <code>&gt;=8.0.0</code> <code>8.1.3</code> BSD-3-Clause <code>colorama</code> Cross-platform colored terminal text. <code>; platform_system == \"Windows\"</code> <code>0.4.6</code> BSD License <code>coverage</code> Code coverage measurement for Python <code>[toml]&gt;=5.2.1</code> <code>7.0.5</code> Apache-2.0 <code>darglint</code> A utility for ensuring Google-style docstrings stay up to date with the source code. <code>&gt;=1.8</code> <code>1.8.1</code> MIT <code>docutils</code> Docutils -- Python Documentation Utilities <code>0.19</code> public domain, Python, 2-Clause BSD, GPL 3 (see COPYING.txt) <code>dparse</code> A parser for Python dependency files <code>&gt;=0.6.2</code> <code>0.6.2</code> MIT license <code>duty</code> A simple task runner. <code>&gt;=0.7</code> <code>0.7.0</code> ISC <code>exceptiongroup</code> Backport of PEP 654 (exception groups) <code>&gt;=1.0.0rc8; python_version &lt; \"3.11\"</code> <code>1.1.0</code> MIT License <code>execnet</code> execnet: rapid multi-Python deployment <code>&gt;=1.1</code> <code>1.9.0</code> MIT <code>failprint</code> Run a command, print its output only if it fails. <code>~=0.8</code> <code>0.8.0</code> ISC <code>flake8</code> the modular source code checker: pep8 pyflakes and co <code>&gt;=4; python_version &gt;= '3.8'</code> <code>5.0.4</code> MIT <code>flake8-bandit</code> Automated security testing with bandit and flake8. <code>&gt;=2.1</code> <code>4.1.1</code> MIT <code>flake8-black</code> flake8 plugin to call black as a code style validator <code>&gt;=0.2</code> <code>0.3.6</code> MIT <code>flake8-bugbear</code> A plugin for flake8 finding likely bugs and design problems in your program. Contains warnings that don't belong in pyflakes and pycodestyle. <code>&gt;=21.9</code> <code>23.1.17</code> MIT <code>flake8-builtins</code> Check for python builtins being used as variables or parameters. <code>&gt;=1.5</code> <code>2.1.0</code> GPL version 2 <code>flake8-comprehensions</code> A flake8 plugin to help you write better list/set/dict comprehensions. <code>&gt;=3.7</code> <code>3.10.1</code> MIT <code>flake8-docstrings</code> Extension for flake8 which uses pydocstyle to check docstrings <code>&gt;=1.6</code> <code>1.6.0</code> MIT License <code>flake8-plugin-utils</code> The package provides base classes and utils for flake8 plugin writing <code>&lt;2.0.0,&gt;=1.3.2</code> <code>1.3.2</code> MIT <code>flake8-polyfill</code> Polyfill package for Flake8 plugins <code>&gt;=1.0.2</code> <code>1.0.2</code> MIT <code>flake8-pytest-style</code> A flake8 plugin checking common style issues or inconsistencies with pytest-based tests. <code>&gt;=1.5</code> <code>1.6.0</code> MIT <code>flake8-string-format</code> string format checker, plugin for flake8 <code>&gt;=0.3</code> <code>0.3.0</code> MIT License <code>flake8-tidy-imports</code> A flake8 plugin that helps you write tidier imports. <code>&gt;=4.5</code> <code>4.8.0</code> MIT <code>flake8-variables-names</code> A flake8 extension that helps to make more readable variables names <code>&gt;=0.0</code> <code>0.0.5</code> MIT <code>ghp-import</code> Copy your docs directly to the gh-pages branch. <code>&gt;=1.0</code> <code>2.1.0</code> Apache Software License <code>git-changelog</code> Automatic Changelog generator using Jinja2 templates. <code>&gt;=0.4</code> <code>0.6.0</code> ISC <code>gitdb</code> Git Object Database <code>&lt;5,&gt;=4.0.1</code> <code>4.0.10</code> BSD License <code>gitpython</code> GitPython is a python library used to interact with Git repositories <code>&gt;=1.0.1</code> <code>3.1.30</code> BSD <code>griffe</code> Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API. <code>&gt;=0.24</code> <code>0.25.3</code> ISC <code>idna</code> Internationalized Domain Names in Applications (IDNA) <code>&lt;4,&gt;=2.5</code> <code>3.4</code> BSD License <code>imagesize</code> Getting image size from png/jpeg/jpeg2000/gif file <code>&gt;=1.3</code> <code>1.4.1</code> MIT <code>importlib-metadata</code> Read metadata from Python packages <code>&lt;5; python_version &lt; '3.8'</code> <code>4.13.0</code> ? <code>iniconfig</code> brain-dead simple config-ini parsing <code>2.0.0</code> MIT License <code>isort</code> A Python utility / library to sort Python imports. <code>&gt;=5.10</code> <code>5.11.4</code> MIT <code>jinja2</code> A very fast and expressive template engine. <code>&lt;4,&gt;=2.11</code> <code>3.1.2</code> BSD-3-Clause <code>markdown</code> Python implementation of Markdown. <code>&lt;4.0.0,&gt;=3.3.3</code> <code>3.3.7</code> BSD License <code>markdown-callouts</code> Markdown extension: a classier syntax for admonitions <code>&gt;=0.2</code> <code>0.3.0</code> MIT <code>markdown-exec</code> Utilities to execute code blocks in Markdown files. <code>&gt;=0.5</code> <code>1.0.0</code> ISC <code>markupsafe</code> Safely add untrusted strings to HTML/XML markup. <code>&gt;=2.0</code> <code>2.1.2</code> BSD-3-Clause <code>mccabe</code> McCabe checker, plugin for flake8 <code>&lt;0.8.0,&gt;=0.7.0</code> <code>0.7.0</code> Expat license <code>mergedeep</code> A deep merge function for \ud83d\udc0d. <code>&gt;=1.3.4</code> <code>1.3.4</code> MIT License <code>mkdocs</code> Project documentation with Markdown. <code>&gt;=1.3</code> <code>1.4.2</code> BSD License <code>mkdocs-coverage</code> MkDocs plugin to integrate your coverage HTML report into your site. <code>&gt;=0.2</code> <code>0.2.6</code> ISC <code>mkdocs-gen-files</code> MkDocs plugin to programmatically generate documentation pages during the build <code>&gt;=0.3</code> <code>0.4.0</code> MIT <code>mkdocs-literate-nav</code> MkDocs plugin to specify the navigation in Markdown instead of YAML <code>&gt;=0.4</code> <code>0.6.0</code> MIT License <code>mkdocs-material</code> Documentation that simply works <code>&gt;=7.3</code> <code>9.0.5</code> MIT License <code>mkdocs-material-extensions</code> Extension pack for Python Markdown and MkDocs Material. <code>&gt;=1.1</code> <code>1.1.1</code> MIT License <code>mkdocs-section-index</code> MkDocs plugin to allow clickable sections that lead to an index page <code>&gt;=0.3</code> <code>0.3.4</code> MIT <code>mkdocstrings-python</code> A Python handler for mkdocstrings. <code>&gt;=0.5.1</code> <code>0.8.3</code> ISC <code>mypy</code> Optional static typing for Python <code>&gt;=0.910</code> <code>0.991</code> MIT License <code>mypy-extensions</code> Experimental type system extensions for programs checked with the mypy typechecker. <code>&gt;=0.4.3</code> <code>0.4.3</code> MIT License <code>packaging</code> Core utilities for Python packages <code>&gt;=20.5</code> <code>21.3</code> BSD-2-Clause or Apache-2.0 <code>pathspec</code> Utility library for gitignore style pattern matching of file paths. <code>&gt;=0.9.0</code> <code>0.10.3</code> MPL 2.0 <code>pbr</code> Python Build Reasonableness <code>!=2.1.0,&gt;=2.0.0</code> <code>5.11.1</code> Apache Software License <code>pep8-naming</code> Check PEP-8 naming conventions, plugin for flake8 <code>&gt;=0.12</code> <code>0.13.3</code> Expat license <code>platformdirs</code> A small Python package for determining appropriate platform-specific dirs, e.g. a \"user data dir\". <code>&gt;=2</code> <code>2.6.2</code> MIT License <code>pluggy</code> plugin and hook calling mechanisms for python <code>&lt;2.0,&gt;=0.12</code> <code>1.0.0</code> MIT <code>ptyprocess</code> Run a subprocess in a pseudo terminal <code>~=0.6; sys_platform != \"win32\"</code> <code>0.7.0</code> ISC License (ISCL) <code>pycodestyle</code> Python style guide checker <code>&lt;2.10.0,&gt;=2.9.0</code> <code>2.9.1</code> Expat license <code>pydocstyle</code> Python docstring style checker <code>&gt;=2.1</code> <code>6.3.0</code> MIT <code>pyflakes</code> passive checker of Python programs <code>&lt;3,&gt;=1.1.0</code> <code>2.5.0</code> MIT <code>pygments</code> Pygments is a syntax highlighting package written in Python. <code>&gt;=2.10</code> <code>2.14.0</code> BSD-2-Clause <code>pymdown-extensions</code> Extension pack for Python Markdown. <code>&gt;=9</code> <code>9.9.1</code> MIT License <code>pyparsing</code> pyparsing module - Classes and methods to define and execute parsing grammars <code>!=3.0.5,&gt;=2.0.2</code> <code>3.0.9</code> MIT License <code>pytest</code> pytest: simple powerful testing with Python <code>&gt;=6.2</code> <code>7.2.1</code> MIT <code>pytest-cov</code> Pytest plugin for measuring coverage. <code>&gt;=3.0</code> <code>4.0.0</code> MIT <code>pytest-randomly</code> Pytest plugin to randomly order tests and control random.seed. <code>&gt;=3.10</code> <code>3.12.0</code> MIT <code>pytest-xdist</code> pytest xdist plugin for distributed testing, most importantly across multiple CPUs <code>&gt;=2.4</code> <code>3.1.0</code> MIT <code>python-dateutil</code> Extensions to the standard Python datetime module <code>&gt;=2.8.1</code> <code>2.8.2</code> Dual License <code>pytz</code> World timezone definitions, modern and historical <code>&gt;=2015.7</code> <code>2022.7.1</code> MIT <code>pyyaml</code> YAML parser and emitter for Python <code>&gt;=5.1</code> <code>6.0</code> MIT <code>pyyaml-env-tag</code> A custom YAML tag for referencing environment variables in YAML files. <code>&gt;=0.1</code> <code>0.1</code> MIT License <code>regex</code> Alternative regular expression module, to replace re. <code>&gt;=2022.4.24</code> <code>2022.10.31</code> Apache Software License <code>requests</code> Python HTTP for Humans. <code>&gt;=2.26</code> <code>2.28.2</code> Apache 2.0 <code>ruamel.yaml</code> ruamel.yaml is a YAML parser/emitter that supports roundtrip preservation of comments, seq/map flow style, and map key order <code>&gt;=0.17.21</code> <code>0.17.21</code> MIT license <code>ruamel.yaml.clib</code> C version of reader, parser and emitter for ruamel.yaml derived from libyaml <code>&gt;=0.2.6; platform_python_implementation == \"CPython\" and python_version &lt; \"3.11\"</code> <code>0.2.7</code> MIT <code>safety</code> Checks installed dependencies for known vulnerabilities and licenses. <code>&gt;=2</code> <code>2.3.5</code> MIT license <code>semver</code> Python helper for Semantic Versioning (http://semver.org/) <code>~=2.13</code> <code>2.13.0</code> BSD <code>setuptools</code> Easily download, build, install, upgrade, and uninstall Python packages <code>&gt;=19.3</code> <code>66.0.0</code> MIT License <code>six</code> Python 2 and 3 compatibility utilities <code>&gt;=1.5</code> <code>1.16.0</code> MIT <code>smmap</code> A pure Python implementation of a sliding window memory map manager <code>&lt;6,&gt;=3.0.1</code> <code>5.0.0</code> BSD <code>snowballstemmer</code> This package provides 29 stemmers for 28 languages generated from Snowball algorithms. <code>&gt;=2.2.0</code> <code>2.2.0</code> BSD-3-Clause <code>sphinx</code> Python documentation generator <code>5.3.0</code> BSD License <code>sphinxcontrib-applehelp</code> sphinxcontrib-applehelp is a sphinx extension which outputs Apple help books <code>1.0.2</code> BSD <code>sphinxcontrib-devhelp</code> sphinxcontrib-devhelp is a sphinx extension which outputs Devhelp document. <code>1.0.2</code> BSD <code>sphinxcontrib-htmlhelp</code> sphinxcontrib-htmlhelp is a sphinx extension which renders HTML help files <code>&gt;=2.0.0</code> <code>2.0.0</code> BSD <code>sphinxcontrib-jsmath</code> A sphinx extension which renders display math in HTML via JavaScript <code>1.0.1</code> BSD <code>sphinxcontrib-qthelp</code> sphinxcontrib-qthelp is a sphinx extension which outputs QtHelp document. <code>1.0.3</code> BSD <code>sphinxcontrib-serializinghtml</code> sphinxcontrib-serializinghtml is a sphinx extension which outputs \"serialized\" HTML files (json and pickle). <code>&gt;=1.1.5</code> <code>1.1.5</code> BSD <code>stevedore</code> Manage dynamic plugins for Python applications <code>&gt;=1.20.0</code> <code>3.5.2</code> Apache Software License <code>toml</code> Python Library for Tom's Obvious, Minimal Language <code>&gt;=0.10</code> <code>0.10.2</code> MIT <code>tomli</code> A lil' TOML parser <code>&gt;=2.0.1; python_version &lt; \"3.11\"</code> <code>2.0.1</code> MIT License <code>typed-ast</code> a fork of Python 2 and 3 ast modules with type comment support <code>&gt;=1.4.2; python_version &lt; \"3.8\" and implementation_name == \"cpython\"</code> <code>1.5.4</code> ? <code>types-docutils</code> Typing stubs for docutils <code>0.19.1.2</code> Apache-2.0 license <code>types-markdown</code> Typing stubs for Markdown <code>&gt;=3.3</code> <code>3.4.2.2</code> Apache-2.0 license <code>types-pyyaml</code> Typing stubs for PyYAML <code>6.0.12.3</code> Apache-2.0 license <code>types-toml</code> Typing stubs for toml <code>&gt;=0.10</code> <code>0.10.8.1</code> Apache-2.0 license <code>typing-extensions</code> Backported and Experimental Type Hints for Python 3.7+ <code>&gt;=3.10.0.0; python_version &lt; \"3.10\"</code> <code>4.4.0</code> Python Software Foundation License <code>urllib3</code> HTTP library with thread-safe connection pooling, file post, and more. <code>&lt;1.27,&gt;=1.21.1</code> <code>1.26.14</code> MIT <code>watchdog</code> Filesystem events monitoring <code>&gt;=2.0</code> <code>2.2.1</code> Apache License 2.0 <code>wps-light</code> The strictest and most opinionated python linter ever (lighter fork). <code>&gt;=0.15</code> <code>0.16.1</code> MIT <code>zipp</code> Backport of pathlib-compatible object wrapper for zip files <code>&gt;=0.5</code> <code>3.11.0</code> ? <p>More credits from the author</p>"},{"location":"license/","title":"License","text":"<pre><code>ISC License\n\nCopyright (c) 2019, Timoth\u00e9e Mazzucotelli\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n</code></pre>"},{"location":"recipes/","title":"Recipes","text":"<p>On this page you will find various recipes, tips and tricks for mkdocstrings and more generally Markdown documentation.</p>"},{"location":"recipes/#automatic-code-reference-pages","title":"Automatic code reference pages","text":"<p>mkdocstrings allows to inject documentation for any object into Markdown pages. But as the project grows, it quickly becomes quite tedious to keep the autodoc instructions, or even the dedicated Markdown files in sync with all your source files and objects.</p> <p>In this recipe, we will iteratively automate the process of generating these pages at each build of the documentation.</p> <p>Let say you have a project called <code>project</code>. This project has a lot of source files, or modules, which live in the <code>src</code> folder:</p> <pre><code>\ud83d\udcc1 repo\n\u2514\u2500\u2574\ud83d\udcc1 src\n    \u2514\u2500\u2574\ud83d\udcc1 project\n        \u251c\u2500\u2574\ud83d\udcc4 lorem\n        \u251c\u2500\u2574\ud83d\udcc4 ipsum\n        \u251c\u2500\u2574\ud83d\udcc4 dolor\n        \u251c\u2500\u2574\ud83d\udcc4 sit\n        \u2514\u2500\u2574\ud83d\udcc4 amet\n</code></pre> <p>Without an automatic process, you will have to manually create a Markdown page for each one of these modules, with the corresponding autodoc instruction, for example <code>::: project.lorem</code>, and also add entry in MkDocs' navigation option (<code>nav</code> in <code>mkdocs.yml</code>). With a lot of modules, this is quickly getting cumbersome.</p> <p>Lets fix that.</p>"},{"location":"recipes/#generate-pages-on-the-fly","title":"Generate pages on-the-fly","text":"<p>In this recipe, we suggest to use the mkdocs-gen-files plugin. This plugin exposes utilities to generate files at build time. These files won't be written to the docs directory: you don't have to track and version them. They are transparently generated each time you build your docs. This is perfect for our use-case!</p> <p>Add <code>mkdocs-gen-files</code> to your project's docs dependencies, and configure it like so:</p> mkdocs.yml<pre><code>plugins:\n- search  # (1)\n- gen-files:\nscripts:\n- docs/gen_ref_pages.py  # (2)\n- mkdocstrings\n</code></pre> <ol> <li>Don't forget to load the <code>search</code> plugin when redefining the <code>plugins</code> item.</li> <li>The magic happens here, see below how it works.</li> </ol> <p>mkdocs-gen-files is able to run Python scripts at build time. The Python script that we will execute lives in the docs folder, and is named <code>gen_ref_pages.py</code>, like \"generate code reference pages\".</p> docs/gen_ref_pages.py<pre><code>\"\"\"Generate the code reference pages.\"\"\"\n\nfrom pathlib import Path\n\nimport mkdocs_gen_files\n\nfor path in sorted(Path(\"src\").rglob(\"*.py\")):  # (1)\n    module_path = path.relative_to(\"src\").with_suffix(\"\")  # (2)\n    doc_path = path.relative_to(\"src\").with_suffix(\".md\")  # (3)\n    full_doc_path = Path(\"reference\", doc_path)  # (4)\n\n    parts = list(module_path.parts)\n\n    if parts[-1] == \"__init__\":  # (5)\n        parts = parts[:-1]\n    elif parts[-1] == \"__main__\":\n        continue\n\n    with mkdocs_gen_files.open(full_doc_path, \"w\") as fd:  # (6)\n        identifier = \".\".join(parts)  # (7)\n        print(\"::: \" + identifier, file=fd)  # (8)\n\n    mkdocs_gen_files.set_edit_path(full_doc_path, path)  # (9)\n</code></pre> <ol> <li>Here we recursively list all <code>.py</code> files, but you can adapt the code to list    files with other extensions of course, supporting other languages than Python.</li> <li>The module path will look like <code>project/lorem</code>.    It will be used to build the mkdocstrings autodoc identifier.</li> <li>This is the relative path to the Markdown page.</li> <li>This is the absolute path to the Markdown page. Here we put all reference pages    into a <code>reference</code> folder.</li> <li>This part is only relevant for Python modules. We skip <code>__main__</code> modules and    remove <code>__init__</code> from the module parts as it's implicit during imports.</li> <li>Magic! Add the file to MkDocs pages, without actually writing it in the docs folder.</li> <li>Build the autodoc identifier. Here we document Python modules, so the identifier    is a dot-separated path, like <code>project.lorem</code>.</li> <li>Actually write to the magic file.</li> <li>We can even set the <code>edit_uri</code> on the pages.</li> </ol> <p>Note</p> <p> It is important to look out for correct edit page behaviour when using generated pages. For example, if we have <code>edit_uri</code> set to <code>blob/master/docs/</code> and the following file structure:</p> <pre><code>\ud83d\udcc1 repo\n\u251c\u2500 \ud83d\udcc4 mkdocs.yml\n\u2502\n\u251c\u2500 \ud83d\udcc1 docs\n\u2502   \u251c\u2500\u2574\ud83d\udcc4 index.md\n\u2502   \u2514\u2500\u2574\ud83d\udcc4 gen_ref_pages.py\n\u2502\n\u2514\u2500\u2574\ud83d\udcc1 src\n   \u2514\u2500\u2574\ud83d\udcc1 project\n       \u251c\u2500\u2574\ud83d\udcc4 lorem.py\n       \u251c\u2500\u2574\ud83d\udcc4 ipsum.py\n       \u251c\u2500\u2574\ud83d\udcc4 dolor.py\n       \u251c\u2500\u2574\ud83d\udcc4 sit.py\n       \u2514\u2500\u2574\ud83d\udcc4 amet.py\n</code></pre> <p>Then we will have to change our <code>set_edit_path</code> call to:</p> <pre><code>mkdocs_gen_files.set_edit_path(full_doc_path, Path(\"../\") / path)  # (1)\n</code></pre> <ol> <li>Path can be used to traverse the structure in any way you may need, but    remember to use relative paths!</li> </ol> <p>...so that it correctly sets the edit path of (for example) <code>lorem.py</code> to <code>&lt;repo_url&gt;/blob/master/src/project/lorem.py</code> instead of <code>&lt;repo_url&gt;/blob/master/docs/src/project/lorem.py</code>.</p> <p>With this script, a <code>reference</code> folder is automatically created each time we build our docs. This folder contains a Markdown page for each of our source modules, and each of these pages contains a single line of the form <code>::: project.module</code> (module being <code>lorem</code>, <code>ipsum</code>, etc.). Great! But, we still have to actually add those pages into our MkDocs navigation:</p> mkdocs.yml<pre><code>nav:\n# rest of the navigation...\n- Code Reference:\n- project:\n- lorem: reference/project/lorem.md\n- ipsum: reference/project/ipsum.md\n- dolor: reference/project/dolor.md\n- sit: reference/project/sit.md\n- amet: reference/project/amet.md\n# rest of the navigation...\n</code></pre> <p>Err... so this process is only semi-automatic? Yes, but don't worry, we can fully automate it.</p>"},{"location":"recipes/#generate-a-literate-navigation-file","title":"Generate a literate navigation file","text":"<p>mkdocs-gen-files is able to generate a literate navigation file. But to make use of it, we will need an additional plugin: mkdocs-literate-nav. This plugin allows to specify the whole navigation, or parts of it, into Markdown pages, as plain Markdown lists. We use it here to specify the navigation for the code reference pages.</p> <p>First, add <code>mkdocs-literate-nav</code> to your project's docs dependencies, and configure the plugin in your MkDocs configuration:</p> mkdocs.yml<pre><code>plugins:\n- search\n- gen-files:\nscripts:\n- docs/gen_ref_pages.py\n- literate-nav:\nnav_file: SUMMARY.md\n- mkdocstrings\n</code></pre> <p>Then, the previous script is updated like so:</p> docs/gen_ref_pages.py<pre><code>\"\"\"Generate the code reference pages and navigation.\"\"\"\n\nfrom pathlib import Path\n\nimport mkdocs_gen_files\n\nnav = mkdocs_gen_files.Nav()\nfor path in sorted(Path(\"src\").rglob(\"*.py\")):\n    module_path = path.relative_to(\"src\").with_suffix(\"\")\n    doc_path = path.relative_to(\"src\").with_suffix(\".md\")\n    full_doc_path = Path(\"reference\", doc_path)\n\n    parts = tuple(module_path.parts)\n\n    if parts[-1] == \"__init__\":\n        parts = parts[:-1]\n    elif parts[-1] == \"__main__\":\n        continue\n\nnav[parts] = doc_path.as_posix()  # (1)\nwith mkdocs_gen_files.open(full_doc_path, \"w\") as fd:\n        ident = \".\".join(parts)\n        fd.write(f\"::: {ident}\")\n\n    mkdocs_gen_files.set_edit_path(full_doc_path, path)\n\nwith mkdocs_gen_files.open(\"reference/SUMMARY.md\", \"w\") as nav_file:  # (2)\nnav_file.writelines(nav.build_literate_nav())  # (3)\n</code></pre> <ol> <li>Progressively build the navigation object.</li> <li>At the end, create a magic, literate navigation file called <code>SUMMARY.md</code> in the <code>reference</code> folder.</li> <li>Write the navigation as a Markdown list in the literate navigation file.</li> </ol> <p>Now we are able to remove our hard-coded navigation in <code>mkdocs.yml</code>, and replace it with a single line!</p> mkdocs.yml<pre><code>nav:\n# rest of the navigation...\n# defer to gen-files + literate-nav\n- Code Reference: reference/  # (1)\n# rest of the navigation...\n</code></pre> <ol> <li>Note the trailing slash! It is needed so that <code>mkdocs-literate-nav</code> knows    it has to look for a <code>SUMMARY.md</code> file in that folder.</li> </ol> <p>At this point, we should be able to see the tree of our modules in the navigation.</p>"},{"location":"recipes/#bind-pages-to-sections-themselves","title":"Bind pages to sections themselves","text":"<p>There's a last improvement we can do. With the current script, sections, corresponding to folders, will expand or collapse when you click on them, revealing <code>__init__</code> modules under them (or equivalent modules in other languages, if relevant). Since we are documenting a public API, and given users never explicitely import <code>__init__</code> modules, it would be nice if we could get rid of them and instead render their documentation inside the section itself.</p> <p>Well, this is possible thanks to a third plugin: mkdocs-section-index.</p> <p>Update the script like this:</p> docs/gen_ref_pages.py<pre><code>\"\"\"Generate the code reference pages and navigation.\"\"\"\n\nfrom pathlib import Path\n\nimport mkdocs_gen_files\n\nnav = mkdocs_gen_files.Nav()\n\nfor path in sorted(Path(\"src\").rglob(\"*.py\")):\n    module_path = path.relative_to(\"src\").with_suffix(\"\")\n    doc_path = path.relative_to(\"src\").with_suffix(\".md\")\n    full_doc_path = Path(\"reference\", doc_path)\n\n    parts = tuple(module_path.parts)\n\n    if parts[-1] == \"__init__\":\n        parts = parts[:-1]\ndoc_path = doc_path.with_name(\"index.md\")\nfull_doc_path = full_doc_path.with_name(\"index.md\")\nelif parts[-1] == \"__main__\":\n        continue\n\n    nav[parts] = doc_path.as_posix()\n\n    with mkdocs_gen_files.open(full_doc_path, \"w\") as fd:\n        ident = \".\".join(parts)\n        fd.write(f\"::: {ident}\")\n\n    mkdocs_gen_files.set_edit_path(full_doc_path, path)\n\nwith mkdocs_gen_files.open(\"reference/SUMMARY.md\", \"w\") as nav_file:\n    nav_file.writelines(nav.build_literate_nav())\n</code></pre> <p>And update your MkDocs configuration to list the plugin:</p> mkdocs.yml<pre><code>plugins:\n- search\n- gen-files:\nscripts:\n- docs/gen_ref_pages.py\n- literate-nav:\nnav_file: SUMMARY.md\n- section-index\n- mkdocstrings\n</code></pre> <p>With this, <code>__init__</code> modules will be documented and bound to the sections themselves, better reflecting our public API.</p>"},{"location":"recipes/#prevent-selection-of-prompts-and-output-in-python-code-blocks","title":"Prevent selection of prompts and output in Python code blocks","text":"<p>To prevent the selection of <code>&gt;&gt;&gt;</code>, <code>...</code> and output in Python \"Console\" code blocks, you can use the <code>pycon</code> syntax highlighting on your code blocks, and add global CSS rules to your site using MkDocs <code>extra_css</code> option:</p> <pre><code>```pycon\n&gt;&gt;&gt; for word in (\"Hello\", \"mkdocstrings!\"):\n...     print(word, end=\" \")\nHello mkdocstrings!\n```\n</code></pre> docs/css/code_select.css<pre><code>.highlight .gp, .highlight .go { /* Generic.Prompt, Generic.Output */\nuser-select: none;\n}\n</code></pre> mkdocs.yml<pre><code>extra_css:\n- css/code_select.css\n</code></pre> <p>Warning</p> <p> The <code>.highlight .gp, .highlight .go</code> CSS selector can have unintended side-effects. To target <code>pycon</code> code blocks more specifically, you can configure the <code>pymdownx.highlight</code> extension to use Pygments and set language classes on code blocks:</p> mkdocs.yml<pre><code>markdown_extensions:\n- pymdownx.highlight:\nuse_pygments: true\npygments_lang_class: true\n</code></pre> <p>Then you can update the CSS selector like this:</p> docs/css/code_select.css<pre><code>.language-pycon .gp, .language-pycon .go { /* Generic.Prompt, Generic.Output */\nuser-select: none;\n}\n</code></pre> <p>If you don't want to enable this globally, you can still use <code>style</code> tags in the relevant pages, with more accurate CSS selectors:</p> <pre><code>&lt;style&gt;\n#my-div .highlight .gp, #my-div .highlight .go { /* Generic.Prompt, Generic.Output */\nuser-select: none;\n}\n&lt;/style&gt;\n</code></pre> <p>Try to select the following code block's text:</p> <pre><code>&gt;&gt;&gt; for word in (\"Hello\", \"mkdocstrings!\"):\n...     print(word, end=\" \")\nHello mkdocstrings!\n</code></pre>"},{"location":"theming/","title":"Themes","text":"<p>mkdocstrings can support multiple MkDocs themes. It currently supports the Material for MkDocs theme and, partially, the built-in MkDocs and ReadTheDocs themes.</p> <p>Each handler can fallback to a particular theme when the user selected theme is not supported. For example, the Python handler will fallback to the Material for MkDocs templates.</p>"},{"location":"theming/#customization","title":"Customization","text":"<p>There is some degree of customization possible in mkdocstrings. First, you can write custom templates to override the theme templates. Second, the provided templates make use of CSS classes, so you can tweak the look and feel with extra CSS rules.</p>"},{"location":"theming/#templates","title":"Templates","text":"<p>To use custom templates and override the theme ones, specify the relative path to your templates directory with the <code>custom_templates</code> global configuration option:</p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\ncustom_templates: templates\n</code></pre> <p>Your directory structure must be identical to the provided templates one:</p> <pre><code>\ud83d\udcc1 templates/\n\u251c\u2500\u2574\ud83d\udcc1 &lt;HANDLER 1&gt;/\n\u2502   \u251c\u2500\u2500 \ud83d\udcc1 &lt;THEME 1&gt;/\n\u2502   \u2514\u2500\u2500 \ud83d\udcc1 &lt;THEME 2&gt;/\n\u2514\u2500\u2500 \ud83d\udcc1 &lt;HANDLER 2&gt;/\n    \u251c\u2500\u2500 \ud83d\udcc1 &lt;THEME 1&gt;/\n    \u2514\u2500\u2500 \ud83d\udcc1 &lt;THEME 2&gt;/\n</code></pre> <p>For example, check out the Python template tree on GitHub.</p> <p>You don't have to replicate the whole tree, only the handlers, themes or templates you want to override. For example, to override some templates of the Material theme for Python:</p> <pre><code>\ud83d\udcc1 templates/\n\u2514\u2500\u2500 \ud83d\udcc1 python/\n    \u2514\u2500\u2500 \ud83d\udcc1 material/\n        \u251c\u2500\u2500 \ud83d\udcc4 parameters.html\n        \u2514\u2500\u2500 \ud83d\udcc4 exceptions.html\n</code></pre> <p>In the HTML files, replace the original contents with your modified version. In the future, the templates will use Jinja blocks, so it will be easier to modify small part of the templates without copy-pasting the whole files.</p> <p>See the documentation about templates for:</p> <ul> <li>the Crystal handler: https://mkdocstrings.github.io/crystal/styling.html</li> <li>the Python handler: https://mkdocstrings.github.io/python/customization/#templates</li> </ul>"},{"location":"theming/#debugging","title":"Debugging","text":"<p>Every template has access to a <code>log</code> function, allowing to log messages as usual:</p> <pre><code>{{ log.debug(\"A DEBUG message.\") }}\n{{ log.info(\"An INFO message.\") }}\n{{ log.warning(\"A WARNING message.\") }}\n{{ log.error(\"An ERROR message.\") }}\n{{ log.critical(\"A CRITICAL message.\") }}\n</code></pre>"},{"location":"theming/#css-classes","title":"CSS classes","text":"<p>Since each handler provides its own set of templates, with their own CSS classes, we cannot list them all here. See the documentation about CSS classes for:</p> <ul> <li>the Crystal handler: https://mkdocstrings.github.io/crystal/styling.html#custom-styles</li> <li>the Python handler: https://mkdocstrings.github.io/python/customization/#css-classes</li> </ul>"},{"location":"theming/#syntax-highlighting","title":"Syntax highlighting","text":"<p>Code blocks that occur in the docstring of an item inserted with mkdocstrings, as well as code blocks (such as Source code) that mkdocstrings inserts itself, are syntax-highlighted according to the same rules as other normal code blocks in your document. See more details in mkdocstrings.handlers.rendering.Highlighter.</p> <p>As for the CSS class used for code blocks -- it will also match the \"normal\" config, so the default (<code>.codehilite</code> or <code>.highlight</code>) will match your chosen Markdown extension for highlighting.</p> <p>Changed in version 0.15</p> <p>The CSS class used to always be <code>.highlight</code>, but now it depends on the configuration.</p> <p>Long story short, you probably should add <code>pymdownx.highlight</code> to your <code>markdown_extensions</code>, and then use <code>.doc-contents .highlight</code> as the CSS selector in case you want to change something about mkdocstrings' code blocks specifically.</p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#code-blocks-in-admonitions-in-docstrings-or-else-are-not-rendered-correctly","title":"Code blocks in admonitions (in docstrings or else) are not rendered correctly","text":"<p>To render code blocks in admonitions, you need to add the <code>pymdownx.superfences</code> extensions to the list of Markdown extensions in <code>mkdocs.yml</code>. For example:</p> <pre><code>!!! note\n    Some text.\n\n    ```bash\necho \"some code\"\n    ```\n</code></pre> mkdocs.yml<pre><code>markdown_extensions:\n- admonition\n- codehilite\n- pymdownx.superfences\n</code></pre>"},{"location":"troubleshooting/#footnotes-are-duplicated-or-overridden","title":"Footnotes are duplicated or overridden","text":"<p>Before version 0.14, footnotes could be duplicated over a page. Please upgrade to version 0.14 or higher.</p> <p>See also:</p> <ul> <li>Issue #186</li> <li>Tabs in docstrings (from <code>pymdownx.tabbed</code>) are not working properly.</li> </ul>"},{"location":"troubleshooting/#mkdocs-warns-me-about-links-to-unfound-documentation-files","title":"MkDocs warns me about links to unfound documentation files","text":"<p>A warning like this one:</p> <p>WARNING -  Documentation file 'reference/parsers/docstrings.md'   contains a link to 'reference/parsers/pytkdocs.parsers.docstrings.Section'   which is not found in the documentation files.</p> <p>...generally means you used parentheses <code>()</code> instead of brackets <code>[]</code> for a cross-reference. Notice the dots in <code>reference/parsers/pytkdocs.parsers.docstrings.Section</code>? It shows that it's probably a cross-reference, not a direct link. It's probably written like <code>[Section](pytkdocs.parsers.docstrings.Section)</code> in the docs, when it should be <code>[Section][pytkdocs.parsers.docstrings.Section]</code>.</p>"},{"location":"troubleshooting/#some-objects-are-not-rendered-they-do-not-appear-in-the-generated-docs","title":"Some objects are not rendered (they do not appear in the generated docs)","text":"<ul> <li>Make sure the configuration options of the handler are correct.   Check the documentation for Handlers to see the available options for each handler.</li> <li>Also make sure your documentation in your source code is formatted correctly.   For Python code, check the supported docstring styles page.</li> <li>Re-run the Mkdocs command with <code>-v</code>, and carefully read any traceback.</li> </ul>"},{"location":"troubleshooting/#tabs-in-docstrings-from-pymdownxtabbed-are-not-working-properly","title":"Tabs in docstrings (from <code>pymdownx.tabbed</code>) are not working properly","text":"<p>Before version 0.14, multiple tab blocks injected on the same page would result in broken links: clicking on a tab would bring the user to the wrong one. Please upgrade to version 0.14 or higher.</p> <p>See also:</p> <ul> <li>Issue #193</li> <li>Footnotes are duplicated or overridden.</li> </ul> <p>If you are stuck on a version before 0.14, and want to use multiple tab blocks in one page, use this workaround.</p> JavaScript workaround <p>Put the following code in a .js file, and list it in MkDocs' <code>extra_javascript</code>:</p> <pre><code>// Credits to Nikolaos Zioulis (@zuru on GitHub)\nfunction setID(){\nvar tabs = document.getElementsByClassName(\"tabbed-set\");\nfor (var i = 0; i &lt; tabs.length; i++) {\nchildren = tabs[i].children;\nvar counter = 0;\nvar iscontent = 0;\nfor(var j = 0; j &lt; children.length;j++){\nif(typeof children[j].htmlFor === 'undefined'){\nif((iscontent + 1) % 2 == 0){\n// check if it is content\nif(iscontent == 1){\nbtn = children[j].childNodes[1].getElementsByTagName(\"button\");\n}\n}\nelse{\n// if not change the id\nchildren[j].id = \"__tabbed_\" + String(i + 1) + \"_\" + String(counter + 1);\nchildren[j].name = \"__tabbed_\" + String(i + 1);\n// make default tab open\nif(j == 0)\nchildren[j].click();\n}\niscontent++;\n}\nelse{\n// link to the correct tab\nchildren[j].htmlFor = \"__tabbed_\" + String(i+1) + \"_\" + String(counter + 1);\ncounter ++;\n}\n}\n}\n}\nsetID();\n</code></pre> <p>This code will correctly reset the IDs for tabs on a same page.</p>"},{"location":"troubleshooting/#the-generated-documentation-does-not-look-good","title":"The generated documentation does not look good","text":"<p>Please open an ticket on the bugtracker with a detailed explanation and screenshots of the bad-looking parts. Note that you can always customize the look of mkdocstrings blocks -- through both HTML and CSS.</p>"},{"location":"troubleshooting/#warning-could-not-find-cross-reference-target","title":"Warning: could not find cross-reference target","text":"<p>New in version 0.15</p> <p>Cross-linking used to include any Markdown heading, but now it's only for mkdocstrings identifiers by default. See Cross-references to any Markdown heading to opt back in.</p> <p>Make sure the referenced object is properly rendered: verify your configuration options.</p> <p>For false-positives, you can wrap the text in backticks (`) to prevent <code>mkdocstrings</code> from trying to process it.</p>"},{"location":"troubleshooting/#python-specifics","title":"Python specifics","text":""},{"location":"troubleshooting/#nothing-is-rendered-at-all","title":"Nothing is rendered at all","text":"<p>Is your package available in the Python path?</p> <p>See Python handler: Finding modules.</p>"},{"location":"troubleshooting/#latex-in-docstrings-is-not-rendered-correctly","title":"LaTeX in docstrings is not rendered correctly","text":"<p>If you are using a Markdown extension like Arithmatex Mathjax or <code>markdown-katex</code> to render LaTeX, add <code>r</code> in front of your docstring to make sure nothing is escaped. You'll still maybe have to play with escaping to get things right.</p> <p>Example:</p> <pre><code>def math_function(x, y):\nr\"\"\"\n    Look at these formulas:    \n\n    ```math\n    f(x) = \\int_{-\\infty}^\\infty\n    \\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\n    \\,d\\xi\n    ```\n    \"\"\"\n</code></pre>"},{"location":"troubleshooting/#my-docstrings-in-comments-are-not-picked-up","title":"My docstrings in comments (<code>#:</code>) are not picked up","text":"<p>It's because we do not support type annotations in comments.</p> <p>So instead of:</p> <pre><code>import enum\n\nclass MyEnum(enum.Enum):\n    v1 = 1  #: The first choice.\n    v2 = 2  #: The second choice.\n</code></pre> <p>You can use:</p> <pre><code>import enum\n\nclass MyEnum(enum.Enum):\n\"\"\"My enum.\n\n    Attributes:\n        v1: The first choice.\n        v2: The second choice.\n    \"\"\"\n    v1 = 1\n    v2 = 2\n</code></pre> <p>Or:</p> <pre><code>import enum\n\nclass MyEnum(enum.Enum):\n    v1 = 1\n\"\"\"The first choice.\"\"\"\n\n    v2 = 2\n\"\"\"The second choice.\"\"\"\n</code></pre>"},{"location":"troubleshooting/#my-wrapped-function-shows-documentationcode-for-its-wrapper-instead-of-its-own","title":"My wrapped function shows documentation/code for its wrapper instead of its own","text":"<p>Use <code>functools.wraps()</code>:</p> <pre><code>from functools import wraps\n\ndef my_decorator(function):\n\"\"\"The decorator docs.\"\"\"    \n\n    @wraps(function)\n    def wrapped_function(*args, **kwargs):\n        print(\"hello\")\n        function(*args, **kwargs)\n        print(\"bye\")\n\n    return wrapped_function\n\n@my_decorator\ndef my_function(*args, **kwargs):\n\"\"\"The function docs.\"\"\"\n    print(*args, **kwargs)\n</code></pre>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#autodoc-syntax","title":"Autodoc syntax","text":"<p>mkdocstrings works by processing special expressions in your Markdown files.</p> <p>The syntax is as follows:</p> <pre><code>::: identifier\n    YAML block\n</code></pre> <p>Resources on YAML</p> <p> YAML can sometimes be a bit tricky, particularly on indentation. Here are some resources that other users found useful to better understand YAML's peculiarities.</p> <ul> <li>YAML idiosyncrasies</li> <li>YAML multiline</li> </ul> <p>The <code>identifier</code> is a string identifying the object you want to document. The format of an identifier can vary from one handler to another. For example, the Python handler expects the full dotted-path to a Python object: <code>my_package.my_module.MyClass.my_method</code>.</p> <p>The YAML block is optional, and contains some configuration options:</p> <ul> <li><code>handler</code>: the name of the handler to use to collect and render this object.   By default, it will use the value defined in the Global options's   <code>default_handler</code> key, or <code>\"python\"</code>.</li> <li><code>options</code>: a dictionary of options passed to the handler's methods responsible both   for collecting and rendering the documentation. These options can be defined   globally (in <code>mkdocs.yml</code>, see Global options),    locally (as described here), or both. </li> </ul> <p>Example with the Python handler</p> docs/my_page.mdmkdocs.ymlsrc/my_package/my_module.pyResult <pre><code># Documentation for `MyClass`\n\n::: my_package.my_module.MyClass\n    handler: python\n    options:\n      members:\n        - method_a\n        - method_b\n      show_root_heading: false\n      show_source: false\n</code></pre> <pre><code>nav:\n- \"My page\": my_page.md\n</code></pre> <pre><code>class MyClass:\n\"\"\"Print print print!\"\"\"\n\n    def method_a(self):\n\"\"\"Print A!\"\"\"\n        print(\"A!\")\n\n    def method_b(self):\n\"\"\"Print B!\"\"\"\n        print(\"B!\")\n\n    def method_c(self):\n\"\"\"Print C!\"\"\"\n        print(\"C!\")\n</code></pre> <p></p> <p>It is also possible to integrate a mkdocstrings identifier into a Markdown header:</p> <pre><code>## ::: my_package.my_module.MyClass\n    options:\n      show_source: false\n</code></pre> <p>The above is equivalent to:</p> <pre><code>::: my_package.my_module.MyClass\n    options:\n      show_source: false\n      heading_level: 2\n</code></pre>"},{"location":"usage/#documentation-for-myclass","title":"Documentation for <code>MyClass</code>","text":"<p>Print print print!</p>"},{"location":"usage/#mkdocstrings.my_module.MyClass.method_a","title":"<code> method_a(self) </code>","text":"<p>Print A!</p>"},{"location":"usage/#mkdocstrings.my_module.MyClass.method_b","title":"<code> method_b(self) </code>","text":"<p>Print B!</p>"},{"location":"usage/#global-options","title":"Global options","text":"<p>mkdocstrings accepts a few top-level configuration options in <code>mkdocs.yml</code>:</p> <ul> <li><code>default_handler</code>: the handler that is used by default when no handler is specified.</li> <li><code>custom_templates</code>: the path to a directory containing custom templates.   The path is relative to the current working directory.   See Theming.</li> <li><code>handlers</code>: the handlers global configuration.</li> <li><code>enable_inventory</code>: whether to enable inventory file generation.   See Cross-references to other projects / inventories</li> <li><code>enabled</code> (New in version 0.20): Whether to enable the plugin. Defaults to <code>true</code>.   Can be used to reduce build times when doing local development.   Especially useful when used with environment variables (see example below).</li> <li><code>watch</code> (deprecated): a list of directories to watch while serving the documentation.   See Watch directories. **Deprecated in favor of the now built-in   <code>watch</code> feature of MkDocs.</li> </ul> <p>Example</p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\nenabled: !ENV [ENABLE_MKDOCSTRINGS, true]\ncustom_templates: templates\ndefault_handler: python\nhandlers:\npython:\noptions:\nshow_source: false\n</code></pre> <p>The handlers global configuration can then be overridden by local configurations:</p> docs/some_page.md<pre><code>::: my_package.my_module.MyClass\noptions:\nshow_source: true\n</code></pre> <p>Some handlers accept additional global configuration. Check the documentation for your handler of interest in Handlers.</p>"},{"location":"usage/#cross-references","title":"Cross-references","text":"<p>Cross-references are written as Markdown reference-style links:</p> MarkdownHTML Result <pre><code>With a custom title:\n[`Object 1`][full.path.object1]\n\nWith the identifier as title:\n[full.path.object2][]\n</code></pre> <pre><code>&lt;p&gt;With a custom title:\n&lt;a href=\"https://example.com/page1#full.path.object1\"&gt;&lt;code&gt;Object 1&lt;/code&gt;&lt;/a&gt;&lt;p&gt;\n&lt;p&gt;With the identifier as title:\n&lt;a href=\"https://example.com/page2#full.path.object2\"&gt;full.path.object2&lt;/a&gt;&lt;/p&gt;\n</code></pre> <p>Any item that was inserted using the autodoc syntax (e.g. <code>::: full.path.object1</code>) is possible to link to by using the same identifier with the cross-reference syntax (<code>[example][full.path.object1]</code>). But the cross-references are also applicable to the items' children that get pulled in.</p>"},{"location":"usage/#finding-out-the-anchor","title":"Finding out the anchor","text":"<p>If you're not sure which exact identifier a doc item uses, you can look at its \"anchor\", which your Web browser will show in the URL bar when clicking an item's entry in the table of contents. If the URL is <code>https://example.com/some/page.html#full.path.object1</code> then you know that this item is possible to link to with <code>[example][full.path.object1]</code>, regardless of the current page.</p>"},{"location":"usage/#cross-references-to-any-markdown-heading","title":"Cross-references to any Markdown heading","text":"<p>Changed in version 0.15</p> <p>Linking to any Markdown heading used to be the default, but now opt-in is required.</p> <p>If you want to link to any Markdown heading, not just mkdocstrings-inserted items, please enable the autorefs plugin for MkDocs by adding <code>autorefs</code> to <code>plugins</code>:</p> mkdocs.yml<pre><code>plugins:\n- search\n- autorefs\n- mkdocstrings:\n[...]\n</code></pre> <p>Note that you don't need to (<code>pip</code>) install anything more; this plugin is guaranteed to be pulled in with mkdocstrings.</p> <p>Example</p> doc1.mddoc2.mdResult HTML for doc2 <pre><code>## Hello, world!\n\nTesting\n</code></pre> <pre><code>## Something else\n\nPlease see the [Hello, World!][hello-world] section.\n</code></pre> <pre><code>&lt;p&gt;Please see the &lt;a href=\"doc1.html#hello-world\"&gt;Hello, World!&lt;/a&gt; section.&lt;/p&gt;\n</code></pre>"},{"location":"usage/#cross-references-to-a-sub-heading-in-a-docstring","title":"Cross-references to a sub-heading in a docstring","text":"<p>New in version 0.14</p> <p>If you have a Markdown heading inside your docstring, you can also link directly to it. In the example below you see the identifier to be linked is <code>foo.bar--tips</code>, because it's the \"Tips\" heading that's part of the <code>foo.bar</code> object, joined with \"<code>--</code>\".</p> <p>Example</p> foo.pydoc1.mddoc2.mdHTML result for doc2 <pre><code>def bar():\n\"\"\"Hello, world!\n\n    # Tips\n\n    - Stay hydrated.\n    \"\"\"\n</code></pre> <pre><code>::: foo.bar\n</code></pre> <pre><code>Check out the [tips][foo.bar--tips]\n</code></pre> <pre><code>&lt;p&gt;Check out the &lt;a href=\"doc1.html#foo.bar--tips\"&gt;tips&lt;/a&gt;&lt;/p&gt;\n</code></pre> <p>The above tip about Finding out the anchor also applies the same way here.</p> <p>You may also notice that such a heading does not get rendered as a <code>&lt;h1&gt;</code> element directly, but rather the level gets shifted to fit the encompassing document structure. If you're curious about the implementation, check out mkdocstrings.handlers.rendering.HeadingShiftingTreeprocessor and others.</p>"},{"location":"usage/#cross-references-to-other-projects-inventories","title":"Cross-references to other projects / inventories","text":"<p>New in version 0.16</p> <p>Python developers coming from Sphinx might know about its <code>intersphinx</code> extension, that allows to cross-reference items between several projects. mkdocstrings has a similar feature.</p> <p>To reference an item from another project, you must first tell mkdocstrings to load the inventory it provides. Each handler will be responsible of loading inventories specific to its language. For example, the Python handler can load Sphinx-generated inventories (<code>objects.inv</code>).</p> <p>In the following snippet, we load the inventory provided by <code>installer</code>:</p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\nhandlers:\npython:\nimport:\n- https://installer.readthedocs.io/en/stable/objects.inv\n</code></pre> <p>Now it is possible to cross-reference <code>installer</code>'s items. For example:</p> MarkdownResult (HTML)Result (displayed) <pre><code>See [installer.records][] to learn about records.\n</code></pre> <pre><code>&lt;p&gt;See &lt;a href=\"https://installer.readthedocs.io/en/stable/api/records/#module-installer.records\"&gt;installer.records&lt;/a&gt;\nto learn about records.&lt;/p&gt;\n</code></pre> <p>See installer.records to learn about records.</p> <p>You can of course select another version of the inventory, for example:</p> <pre><code>plugins:\n- mkdocstrings:\nhandlers:\npython:\nimport:\n# latest instead of stable\n- https://installer.readthedocs.io/en/latest/objects.inv\n</code></pre> <p>In case the inventory file is not served under the base documentation URL, you can explicitly specify both URLs:</p> <pre><code>plugins:\n- mkdocstrings:\nhandlers:\npython:\nimport:\n- url: https://cdn.example.com/version/objects.inv\nbase_url: https://docs.example.com/version\n</code></pre> <p>Absolute URLs to cross-referenced items will then be based on <code>https://docs.example.com/version/</code> instead of <code>https://cdn.example.com/version/</code>.</p> <p>Reciprocally, mkdocstrings also allows to generate an inventory file in the Sphinx format. It will be enabled by default if the Python handler is used, and generated as <code>objects.inv</code> in the final site directory. Other projects will be able to cross-reference items from your project.</p> <p>To explicitely enable or disable the generation of the inventory file, use the global <code>enable_inventory</code> option:</p> <pre><code>plugins:\n- mkdocstrings:\nenable_inventory: false\n</code></pre>"},{"location":"usage/#watch-directories","title":"Watch directories","text":"<p>Deprecated since version 0.19</p> <p>Instead, use the built-in <code>watch</code> feature of MkDocs.</p> <p>You can add directories to watch with the <code>watch</code> key. It accepts a list of paths.</p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\nwatch:\n- src/my_package_1\n- src/my_package_2\n</code></pre> <p>When serving your documentation and a change occur in one of the listed path, MkDocs will rebuild the site and reload the current page.</p> <p>The <code>watch</code> feature doesn't have special effects</p> <p>Adding directories to the <code>watch</code> list doesn't have any other effect than watching for changes. For example, it will not tell the Python handler to look for packages in these paths (the paths are not added to the <code>PYTHONPATH</code> variable). If you want to tell Python where to look for packages and modules, see Python Handler: Finding modules.</p>"},{"location":"handlers/overview/","title":"Handlers","text":"<p>A handler is what makes it possible to collect and render documentation for a particular language.</p>"},{"location":"handlers/overview/#available-handlers","title":"Available handlers","text":"<ul> <li>Crystal</li> <li>Python (Legacy)</li> <li>Python (Experimental)</li> </ul>"},{"location":"handlers/overview/#about-the-python-handlers","title":"About the Python handlers","text":"<p>Since version 0.18, a new, experimental Python handler is available. It is based on Griffe, which is an improved version of pytkdocs.</p> <p>Note that the experimental handler does not yet support third-party libraries like Django, Marshmallow, Pydantic, etc. It is also not completely ready to handle dynamically built objects, like classes built with a call to <code>type(...)</code>. For most other cases, the experimental handler will work just fine.</p> <p>If you want to keep using the legacy handler as long as possible, you can depend on <code>mkdocstrings-python-legacy</code> directly, or specify the <code>python-legacy</code> extra when depending on mkdocstrings:</p> pyproject.toml<pre><code># PEP 621 dependencies declaration\n# adapt to your dependencies manager\n[project]\ndependencies = [\n\"mkdocstrings[python-legacy]&gt;=0.18\",\n]\n</code></pre> <p>The legacy handler will continue to \"work\" for many releases, as long as the new handler does not cover all previous use-cases.</p>"},{"location":"handlers/overview/#migrate-to-the-experimental-python-handler","title":"Migrate to the experimental Python handler","text":"<p>To use the new, experimental Python handler, you can depend on <code>mkdocstrings-python</code> directly, or specify the <code>python</code> extra when depending on mkdocstrings:</p> pyproject.toml<pre><code># PEP 621 dependencies declaration\n# adapt to your dependencies manager\n[project]\ndependencies = [\n\"mkdocstrings[python]&gt;=0.18\",\n]\n</code></pre>"},{"location":"handlers/overview/#handler-options","title":"Handler options","text":"<ul> <li><code>setup_commands</code> is not yet implemented. In most cases, you won't need it,   since by default the new handler does not execute the code.</li> </ul>"},{"location":"handlers/overview/#selection-options","title":"Selection options","text":"<p>Warning</p> <p>Since mkdocstrings 0.19, the YAML <code>selection</code> key is merged into the <code>options</code> key.</p> <ul> <li> <code>filters</code> is implemented, and used as before.</li> <li> <code>members</code> is implemented, and used as before.</li> <li> <code>inherited_members</code> is not yet implemented.</li> <li> <code>docstring_style</code> is implemented, and used as before,   except for the <code>restructured-text</code> style which is renamed <code>sphinx</code>.   Numpy-style is now built-in, so you can stop depending on <code>pytkdocs[numpy-style]</code>   or <code>docstring_parser</code>.</li> <li> <code>docstring_options</code> is implemented, and used as before.   Refer to the <code>griffe</code> documentation   for the updated list of supported docstring options.</li> <li> <code>new_path_syntax</code> is irrelevant now. If you were setting it to True,   remove the option and replace every colon (<code>:</code>) in your autodoc identifiers   by dots (<code>.</code>).</li> </ul> <p>See all the handler's options.</p>"},{"location":"handlers/overview/#rendering-options","title":"Rendering options","text":"<p>Warning</p> <p>Since mkdocstrings 0.19, the YAML <code>rendering</code> key is merged into the <code>options</code> key.</p> <p>Every previous option is supported. Additional options are available:</p> <ul> <li><code>separate_signature</code>: Render the signature (or attribute value) in a code block below the heading,   instead as inline code. Useful for long signatures. If Black is installed,   the signature is formatted. Default: <code>False</code>.</li> <li><code>line_length</code>: The maximum line length to use when formatting signatures. Default: <code>60</code>.</li> <li><code>show_submodules</code>: Whether to render submodules of a module when iterating on children.   Default: <code>False</code>.</li> <li><code>docstring_section_style</code>: The style to use to render docstring sections such as attributes,   parameters, etc. Available styles: <code>table</code> (default), <code>list</code> and <code>spacy</code>. The SpaCy style   is a poor implementation of their table style.   We are open to improvements through PRs!</li> </ul> <p>See all the handler's options.</p>"},{"location":"handlers/overview/#templates","title":"Templates","text":"<p>Templates are mostly the same as before, but the file layout has changed, as well as some file names. Here is the new tree:</p> <pre><code>\ud83d\udcc1 theme/\n\u251c\u2500\u2500 \ud83d\udcc4 attribute.html\n\u251c\u2500\u2500 \ud83d\udcc4 children.html\n\u251c\u2500\u2500 \ud83d\udcc4 class.html\n\u251c\u2500\u2500 \ud83d\udcc1 docstring/\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 admonition.html\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 attributes.html\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 examples.html\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 other_parameters.html\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 parameters.html\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 raises.html\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 receives.html\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 returns.html\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc4 warns.html\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc4 yields.html\n\u251c\u2500\u2500 \ud83d\udcc4 docstring.html\n\u251c\u2500\u2500 \ud83d\udcc4 expression.html\n\u251c\u2500\u2500 \ud83d\udcc4 function.html\n\u251c\u2500\u2500 \ud83d\udcc4 labels.html\n\u251c\u2500\u2500 \ud83d\udcc4 module.html\n\u2514\u2500\u2500 \ud83d\udcc4 signature.html\n</code></pre> <p>See them in the handler repository. See the documentation about the Python handler templates: https://mkdocstrings.github.io/python/customization/#templates.</p>"},{"location":"handlers/overview/#custom-handlers","title":"Custom handlers","text":"<p>Since version 0.14, you can create and use custom handlers thanks to namespace packages. For more information about namespace packages, see their documentation.</p> <p>TL;DR - Project template for handlers</p> <p>mkdocstrings provides a Copier template to kickstart new handlers: https://github.com/mkdocstrings/handler-template. To use it, install Copier (<code>pipx install copier</code>), then run <code>copier gh:mkdocstrings/handler-template my_handler</code> to generate a new project. See its upstream documentation to learn how to work on the generated project.</p>"},{"location":"handlers/overview/#packaging","title":"Packaging","text":"<p>For mkdocstrings, a custom handler package would have the following structure:</p> <pre><code>\ud83d\udcc1 your_repository\n\u2514\u2500\u2574\ud83d\udcc1 mkdocstrings_handlers\n   \u2514\u2500\u2574\ud83d\udcc1 custom_handler\n      \u251c\u2500\u2574\ud83d\udcc1 templates\n      \u2502\u00a0 \u251c\u2500\u2574\ud83d\udcc1 material\n      \u2502  \u251c\u2500\u2574\ud83d\udcc1 mkdocs\n      \u2502  \u2514\u2500\u2574\ud83d\udcc1 readthedocs\n      \u2514\u2500\u2574\ud83d\udcc4 __init__.py\n</code></pre> <p>Note the absence of <code>__init__.py</code> module in <code>mkdocstrings_handlers</code>!</p>"},{"location":"handlers/overview/#code","title":"Code","text":"<p>A handler is a subclass of the base handler provided by mkdocstrings.</p> <p>See the documentation for the <code>BaseHandler</code>. Subclasses of the base handler must implement the <code>collect</code> and <code>render</code> methods at least. The <code>collect</code> method is responsible for collecting and returning data (extracting documentation from source code, loading introspecting objects in memory, other sources? etc.) while the <code>render</code> method is responsible for actually rendering the data to HTML, using the Jinja templates provided by your package.</p> <p>You must implement a <code>get_handler</code> method at the module level. This function takes the following parameters:</p> <ul> <li><code>theme</code> (string, theme name)</li> <li><code>custom_templates</code> (optional string, path to custom templates directory)</li> <li><code>config_file_path</code> (optional string, path to the config file)</li> </ul> <p>These arguments are all passed as keyword arguments, so you can ignore them by adding <code>**kwargs</code> or similar to your signature. You can also accept additional parameters: the handler's global-only options will be passed to this function when instantiating your handler.</p> <p>Check out how the Python handler is written for inspiration.</p>"},{"location":"handlers/overview/#templates_1","title":"Templates","text":"<p>Your handler's implementation should normally be backed by templates, which go to the directory <code>mkdocstrings_handlers/custom_handler/templates/some_theme</code>. (<code>custom_handler</code> here should be replaced with the actual name of your handler, and <code>some_theme</code> should be the name of an actual MkDocs theme that you support, e.g. <code>material</code>).</p> <p>With that structure, you can use <code>self.env.get_template(\"foo.html\")</code> inside your <code>render</code> method. This already chooses the subdirectory based on the current MkDocs theme.</p> <p>If you wish to support any MkDocs theme, rather than a few specifically selected ones, you can pick one theme's subdirectory to be the fallback for when an unknown theme is encountered. Then you just need to set the <code>fallback_theme</code> variable on your handler subclass. The fallback directory can be used even for themes you explicitly support: you can omit some template from one of the other theme directories in case they're exactly the same as in the fallback theme.</p> <p>If your theme's HTML requires CSS to go along with it, put it into a file named <code>mkdocstrings_handlers/custom_handler/templates/some_theme/style.css</code>, then this will be included into the final site automatically if this handler is ever used. Alternatively, you can put the CSS as a string into the <code>extra_css</code> variable of your renderer.</p> <p>Finally, it's possible to entirely omit templates, and tell mkdocstrings to use the templates of another handler. In you handler, override the <code>get_templates_dir()</code> method to return the other handlers templates path:</p> <pre><code>from pathlib import Path\nfrom mkdocstrings.handlers.base import BaseHandler\n\n\nclass CobraHandler(BaseHandler):\n    def get_templates_dir(self, handler: str) -&gt; Path:\n        # use the python handler templates\n        # (it assumes the python handler is installed)\n        return super().get_templates_dir(\"python\")\n</code></pre>"},{"location":"handlers/overview/#usage","title":"Usage","text":"<p>When a custom handler is installed, it is then available to mkdocstrings. You can configure it as usual:</p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\nhandlers:\ncustom_handler:\nhandler_config_option: yes\noptions:\nsome_config_option: \"a\"\nother_config_option: 0\n</code></pre> <p>...and use it in your autodoc instructions:</p> docs/some_page.md<pre><code># Documentation for an object\n\n::: some.objects.path\n    handler: custom_handler\n    options:\n      some_config_option: \"b\"\n      other_config_option: 1\n</code></pre>"},{"location":"reference/extension/","title":"extension","text":"<p>This module holds the code of the Markdown extension responsible for matching \"autodoc\" instructions.</p> <p>The extension is composed of a Markdown block processor that matches indented blocks starting with a line like '::: identifier'.</p> <p>For each of these blocks, it uses a handler to collect documentation about the given identifier and render it with Jinja templates.</p> <p>Both the collection and rendering process can be configured by adding YAML configuration under the \"autodoc\" instruction:</p> <pre><code>::: some.identifier\nhandler: python\nselection:\noption1: value1\noption2:\n- value2a\n- value2b\nrendering:\noption_x: etc\n</code></pre>"},{"location":"reference/extension/#mkdocstrings.extension.AutoDocProcessor","title":"<code>AutoDocProcessor(parser, md, config, handlers, autorefs)</code>","text":"<p>         Bases: <code>BlockProcessor</code></p> <p>Our \"autodoc\" Markdown block processor.</p> <p>It has a <code>test</code> method that tells if a block matches a criterion, and a <code>run</code> method that processes it.</p> <p>It also has utility methods allowing to get handlers and their configuration easily, useful when processing a matched block.</p> <p>Parameters:</p> Name Type Description Default <code>parser</code> <code>BlockParser</code> <p>A <code>markdown.blockparser.BlockParser</code> instance.</p> required <code>md</code> <code>Markdown</code> <p>A <code>markdown.Markdown</code> instance.</p> required <code>config</code> <code>dict</code> <p>The configuration of the <code>mkdocstrings</code> plugin.</p> required <code>handlers</code> <code>Handlers</code> <p>The handlers container.</p> required <code>autorefs</code> <code>AutorefsPlugin</code> <p>The autorefs plugin instance.</p> required Source code in <code>mkdocstrings/extension.py</code> <pre><code>def __init__(\n    self, parser: BlockParser, md: Markdown, config: dict, handlers: Handlers, autorefs: AutorefsPlugin\n) -&gt; None:\n\"\"\"Initialize the object.\n\n    Arguments:\n        parser: A `markdown.blockparser.BlockParser` instance.\n        md: A `markdown.Markdown` instance.\n        config: The [configuration][mkdocstrings.plugin.MkdocstringsPlugin.config_scheme]\n            of the `mkdocstrings` plugin.\n        handlers: The handlers container.\n        autorefs: The autorefs plugin instance.\n    \"\"\"\n    super().__init__(parser=parser)\n    self.md = md\n    self._config = config\n    self._handlers = handlers\n    self._autorefs = autorefs\n    self._updated_envs: set = set()\n</code></pre>"},{"location":"reference/extension/#mkdocstrings.extension.AutoDocProcessor.run","title":"<code>run(parent, blocks)</code>","text":"<p>Run code on the matched blocks.</p> <p>The identifier and configuration lines are retrieved from a matched block and used to collect and render an object.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>Element</code> <p>The parent element in the XML tree.</p> required <code>blocks</code> <code>MutableSequence[str]</code> <p>The rest of the blocks to be processed.</p> required Source code in <code>mkdocstrings/extension.py</code> <pre><code>def run(self, parent: Element, blocks: MutableSequence[str]) -&gt; None:\n\"\"\"Run code on the matched blocks.\n\n    The identifier and configuration lines are retrieved from a matched block\n    and used to collect and render an object.\n\n    Arguments:\n        parent: The parent element in the XML tree.\n        blocks: The rest of the blocks to be processed.\n    \"\"\"\n    block = blocks.pop(0)\n    match = self.regex.search(block)\n\n    if match:\n        if match.start() &gt; 0:\n            self.parser.parseBlocks(parent, [block[: match.start()]])\n        # removes the first line\n        block = block[match.end() :]\n\n    block, the_rest = self.detab(block)\n\n    if match:\n        identifier = match[\"name\"]\n        heading_level = match[\"heading\"].count(\"#\")\n        log.debug(f\"Matched '::: {identifier}'\")\n\n        html, handler, data = self._process_block(identifier, block, heading_level)\n        el = Element(\"div\", {\"class\": \"mkdocstrings\"})\n        # The final HTML is inserted as opaque to subsequent processing, and only revealed at the end.\n        el.text = self.md.htmlStash.store(html)\n        # So we need to duplicate the headings directly (and delete later), just so 'toc' can pick them up.\n        headings = handler.get_headings()\n        el.extend(headings)\n\n        page = self._autorefs.current_page\n        if page:\n            for heading in headings:\n                anchor = heading.attrib[\"id\"]  # noqa: WPS440\n                self._autorefs.register_anchor(page, anchor)  # noqa: WPS441\n\n                if \"data-role\" in heading.attrib:\n                    self._handlers.inventory.register(\n                        name=anchor,  # noqa: WPS441\n                        domain=handler.domain,\n                        role=heading.attrib[\"data-role\"],\n                        uri=f\"{page}#{anchor}\",  # noqa: WPS441\n                    )\n\n        parent.append(el)\n\n    if the_rest:\n        # This block contained unindented line(s) after the first indented\n        # line. Insert these lines as the first block of the master blocks\n        # list for future processing.\n        blocks.insert(0, the_rest)\n</code></pre>"},{"location":"reference/extension/#mkdocstrings.extension.AutoDocProcessor.test","title":"<code>test(parent, block)</code>","text":"<p>Match our autodoc instructions.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>Element</code> <p>The parent element in the XML tree.</p> required <code>block</code> <code>str</code> <p>The block to be tested.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>Whether this block should be processed or not.</p> Source code in <code>mkdocstrings/extension.py</code> <pre><code>def test(self, parent: Element, block: str) -&gt; bool:\n\"\"\"Match our autodoc instructions.\n\n    Arguments:\n        parent: The parent element in the XML tree.\n        block: The block to be tested.\n\n    Returns:\n        Whether this block should be processed or not.\n    \"\"\"\n    return bool(self.regex.search(block))\n</code></pre>"},{"location":"reference/extension/#mkdocstrings.extension.MkdocstringsExtension","title":"<code>MkdocstringsExtension(config, handlers, autorefs, **kwargs)</code>","text":"<p>         Bases: <code>Extension</code></p> <p>Our Markdown extension.</p> <p>It cannot work outside of <code>mkdocstrings</code>.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>dict</code> <p>The configuration items from <code>mkdocs</code> and <code>mkdocstrings</code> that must be passed to the block processor when instantiated in <code>extendMarkdown</code>.</p> required <code>handlers</code> <code>Handlers</code> <p>The handlers container.</p> required <code>autorefs</code> <code>AutorefsPlugin</code> <p>The autorefs plugin instance.</p> required <code>**kwargs</code> <code>Any</code> <p>Keyword arguments used by <code>markdown.extensions.Extension</code>.</p> <code>{}</code> Source code in <code>mkdocstrings/extension.py</code> <pre><code>def __init__(self, config: dict, handlers: Handlers, autorefs: AutorefsPlugin, **kwargs: Any) -&gt; None:\n\"\"\"Initialize the object.\n\n    Arguments:\n        config: The configuration items from `mkdocs` and `mkdocstrings` that must be passed to the block processor\n            when instantiated in [`extendMarkdown`][mkdocstrings.extension.MkdocstringsExtension.extendMarkdown].\n        handlers: The handlers container.\n        autorefs: The autorefs plugin instance.\n        **kwargs: Keyword arguments used by `markdown.extensions.Extension`.\n    \"\"\"\n    super().__init__(**kwargs)\n    self._config = config\n    self._handlers = handlers\n    self._autorefs = autorefs\n</code></pre>"},{"location":"reference/extension/#mkdocstrings.extension.MkdocstringsExtension.extendMarkdown","title":"<code>extendMarkdown(md)</code>","text":"<p>Register the extension.</p> <p>Add an instance of our <code>AutoDocProcessor</code> to the Markdown parser.</p> <p>Parameters:</p> Name Type Description Default <code>md</code> <code>Markdown</code> <p>A <code>markdown.Markdown</code> instance.</p> required Source code in <code>mkdocstrings/extension.py</code> <pre><code>def extendMarkdown(self, md: Markdown) -&gt; None:  # noqa: N802 (casing: parent method's name)\n\"\"\"Register the extension.\n\n    Add an instance of our [`AutoDocProcessor`][mkdocstrings.extension.AutoDocProcessor] to the Markdown parser.\n\n    Arguments:\n        md: A `markdown.Markdown` instance.\n    \"\"\"\n    md.parser.blockprocessors.register(\n        AutoDocProcessor(md.parser, md, self._config, self._handlers, self._autorefs),\n        \"mkdocstrings\",\n        priority=75,  # Right before markdown.blockprocessors.HashHeaderProcessor\n    )\n    md.treeprocessors.register(\n        _PostProcessor(md),\n        \"mkdocstrings_post\",\n        priority=4,  # Right after 'toc'.\n    )\n</code></pre>"},{"location":"reference/inventory/","title":"inventory","text":"<p>Module responsible for the objects inventory.</p>"},{"location":"reference/inventory/#mkdocstrings.inventory.Inventory","title":"<code>Inventory(items=None, project='project', version='0.0.0')</code>","text":"<p>         Bases: <code>dict</code></p> <p>Inventory of collected and rendered objects.</p> <p>Parameters:</p> Name Type Description Default <code>items</code> <code>Optional[List[InventoryItem]]</code> <p>A list of items.</p> <code>None</code> <code>project</code> <code>str</code> <p>The project name.</p> <code>'project'</code> <code>version</code> <code>str</code> <p>The project version.</p> <code>'0.0.0'</code> Source code in <code>mkdocstrings/inventory.py</code> <pre><code>def __init__(self, items: Optional[List[InventoryItem]] = None, project: str = \"project\", version: str = \"0.0.0\"):\n\"\"\"Initialize the object.\n\n    Arguments:\n        items: A list of items.\n        project: The project name.\n        version: The project version.\n    \"\"\"\n    super().__init__()\n    items = items or []\n    for item in items:\n        self[item.name] = item\n    self.project = project\n    self.version = version\n</code></pre>"},{"location":"reference/inventory/#mkdocstrings.inventory.Inventory.format_sphinx","title":"<code>format_sphinx()</code>","text":"<p>Format this inventory as a Sphinx <code>objects.inv</code> file.</p> <p>Returns:</p> Type Description <code>bytes</code> <p>The inventory as bytes.</p> Source code in <code>mkdocstrings/inventory.py</code> <pre><code>def format_sphinx(self) -&gt; bytes:\n\"\"\"Format this inventory as a Sphinx `objects.inv` file.\n\n    Returns:\n        The inventory as bytes.\n    \"\"\"\n    header = (\n        dedent(\n            f\"\"\"\n            # Sphinx inventory version 2\n            # Project: {self.project}\n            # Version: {self.version}\n            # The remainder of this file is compressed using zlib.\n            \"\"\"\n        )\n        .lstrip()\n        .encode(\"utf8\")\n    )\n\n    lines = [item.format_sphinx().encode(\"utf8\") for item in self.values()]\n    return header + zlib.compress(b\"\\n\".join(lines) + b\"\\n\", 9)\n</code></pre>"},{"location":"reference/inventory/#mkdocstrings.inventory.Inventory.parse_sphinx","title":"<code>parse_sphinx(in_file, *, domain_filter=())</code>  <code>classmethod</code>","text":"<p>Parse a Sphinx v2 inventory file and return an <code>Inventory</code> from it.</p> <p>Parameters:</p> Name Type Description Default <code>in_file</code> <code>BinaryIO</code> <p>The binary file-like object to read from.</p> required <code>domain_filter</code> <code>Collection[str]</code> <p>A collection of domain values to allow (and filter out all other ones).</p> <code>()</code> <p>Returns:</p> Type Description <code>Inventory</code> <p>An <code>Inventory</code> containing the collected <code>InventoryItem</code>s.</p> Source code in <code>mkdocstrings/inventory.py</code> <pre><code>@classmethod\ndef parse_sphinx(cls, in_file: BinaryIO, *, domain_filter: Collection[str] = ()) -&gt; \"Inventory\":\n\"\"\"Parse a Sphinx v2 inventory file and return an `Inventory` from it.\n\n    Arguments:\n        in_file: The binary file-like object to read from.\n        domain_filter: A collection of domain values to allow (and filter out all other ones).\n\n    Returns:\n        An `Inventory` containing the collected `InventoryItem`s.\n    \"\"\"\n    for _ in range(4):\n        in_file.readline()\n    lines = zlib.decompress(in_file.read()).splitlines()\n    items = [InventoryItem.parse_sphinx(line.decode(\"utf8\")) for line in lines]\n    if domain_filter:\n        items = [item for item in items if item.domain in domain_filter]\n    return cls(items)\n</code></pre>"},{"location":"reference/inventory/#mkdocstrings.inventory.Inventory.register","title":"<code>register(*args, **kwargs)</code>","text":"<p>Create and register an item.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <code>str</code> <p>Arguments passed to InventoryItem.</p> <code>()</code> <code>**kwargs</code> <code>str</code> <p>Keyword arguments passed to InventoryItem.</p> <code>{}</code> Source code in <code>mkdocstrings/inventory.py</code> <pre><code>def register(self, *args: str, **kwargs: str):\n\"\"\"Create and register an item.\n\n    Arguments:\n        *args: Arguments passed to [InventoryItem][mkdocstrings.inventory.InventoryItem].\n        **kwargs: Keyword arguments passed to [InventoryItem][mkdocstrings.inventory.InventoryItem].\n    \"\"\"\n    item = InventoryItem(*args, **kwargs)\n    self[item.name] = item\n</code></pre>"},{"location":"reference/inventory/#mkdocstrings.inventory.InventoryItem","title":"<code>InventoryItem(name, domain, role, uri, priority='1', dispname=None)</code>","text":"<p>Inventory item.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The item name.</p> required <code>domain</code> <code>str</code> <p>The item domain, like 'python' or 'crystal'.</p> required <code>role</code> <code>str</code> <p>The item role, like 'class' or 'method'.</p> required <code>uri</code> <code>str</code> <p>The item URI.</p> required <code>priority</code> <code>str</code> <p>The item priority. It can help for inventory suggestions.</p> <code>'1'</code> <code>dispname</code> <code>Optional[str]</code> <p>The item display name.</p> <code>None</code> Source code in <code>mkdocstrings/inventory.py</code> <pre><code>def __init__(\n    self, name: str, domain: str, role: str, uri: str, priority: str = \"1\", dispname: Optional[str] = None\n):\n\"\"\"Initialize the object.\n\n    Arguments:\n        name: The item name.\n        domain: The item domain, like 'python' or 'crystal'.\n        role: The item role, like 'class' or 'method'.\n        uri: The item URI.\n        priority: The item priority. It can help for inventory suggestions.\n        dispname: The item display name.\n    \"\"\"\n    self.name: str = name\n    self.domain: str = domain\n    self.role: str = role\n    self.uri: str = uri\n    self.priority: str = priority\n    self.dispname: str = dispname or name\n</code></pre>"},{"location":"reference/inventory/#mkdocstrings.inventory.InventoryItem.format_sphinx","title":"<code>format_sphinx()</code>","text":"<p>Format this item as a Sphinx inventory line.</p> <p>Returns:</p> Type Description <code>str</code> <p>A line formatted for an <code>objects.inv</code> file.</p> Source code in <code>mkdocstrings/inventory.py</code> <pre><code>def format_sphinx(self) -&gt; str:\n\"\"\"Format this item as a Sphinx inventory line.\n\n    Returns:\n        A line formatted for an `objects.inv` file.\n    \"\"\"\n    dispname = self.dispname\n    if dispname == self.name:\n        dispname = \"-\"\n    uri = self.uri\n    if uri.endswith(self.name):\n        uri = uri[: -len(self.name)] + \"$\"\n    return f\"{self.name} {self.domain}:{self.role} {self.priority} {uri} {dispname}\"\n</code></pre>"},{"location":"reference/inventory/#mkdocstrings.inventory.InventoryItem.parse_sphinx","title":"<code>parse_sphinx(line)</code>  <code>classmethod</code>","text":"<p>Parse a line from a Sphinx v2 inventory file and return an <code>InventoryItem</code> from it.</p> Source code in <code>mkdocstrings/inventory.py</code> <pre><code>@classmethod\ndef parse_sphinx(cls, line: str) -&gt; \"InventoryItem\":\n\"\"\"Parse a line from a Sphinx v2 inventory file and return an `InventoryItem` from it.\"\"\"\n    match = cls.sphinx_item_regex.search(line)\n    if not match:\n        raise ValueError(line)\n    name, domain, role, priority, uri, dispname = match.groups()\n    if uri.endswith(\"$\"):\n        uri = uri[:-1] + name\n    if dispname == \"-\":\n        dispname = name\n    return cls(name, domain, role, uri, priority, dispname)\n</code></pre>"},{"location":"reference/loggers/","title":"loggers","text":"<p>Logging functions.</p>"},{"location":"reference/loggers/#mkdocstrings.loggers.LoggerAdapter","title":"<code>LoggerAdapter(prefix, logger)</code>","text":"<p>         Bases: <code>logging.LoggerAdapter</code></p> <p>A logger adapter to prefix messages.</p> <p>Parameters:</p> Name Type Description Default <code>prefix</code> <code>str</code> <p>The string to insert in front of every message.</p> required <code>logger</code> <code>logging.Logger</code> <p>The logger instance.</p> required Source code in <code>mkdocstrings/loggers.py</code> <pre><code>def __init__(self, prefix: str, logger: logging.Logger):\n\"\"\"Initialize the object.\n\n    Arguments:\n        prefix: The string to insert in front of every message.\n        logger: The logger instance.\n    \"\"\"\n    super().__init__(logger, {})\n    self.prefix = prefix\n</code></pre>"},{"location":"reference/loggers/#mkdocstrings.loggers.LoggerAdapter.process","title":"<code>process(msg, kwargs)</code>","text":"<p>Process the message.</p> <p>Parameters:</p> Name Type Description Default <code>msg</code> <code>str</code> <p>The message:</p> required <code>kwargs</code> <code>MutableMapping[str, Any]</code> <p>Remaining arguments.</p> required <p>Returns:</p> Type Description <code>Tuple[str, Any]</code> <p>The processed message.</p> Source code in <code>mkdocstrings/loggers.py</code> <pre><code>def process(self, msg: str, kwargs: MutableMapping[str, Any]) -&gt; Tuple[str, Any]:\n\"\"\"Process the message.\n\n    Arguments:\n        msg: The message:\n        kwargs: Remaining arguments.\n\n    Returns:\n        The processed message.\n    \"\"\"\n    return f\"{self.prefix}: {msg}\", kwargs\n</code></pre>"},{"location":"reference/loggers/#mkdocstrings.loggers.TemplateLogger","title":"<code>TemplateLogger(logger)</code>","text":"<p>A wrapper class to allow logging in templates.</p> <p>Attributes:</p> Name Type Description <code>debug</code> <p>Function to log a DEBUG message.</p> <code>info</code> <p>Function to log an INFO message.</p> <code>warning</code> <p>Function to log a WARNING message.</p> <code>error</code> <p>Function to log an ERROR message.</p> <code>critical</code> <p>Function to log a CRITICAL message.</p> <p>Parameters:</p> Name Type Description Default <code>logger</code> <code>LoggerAdapter</code> <p>A logger adapter.</p> required Source code in <code>mkdocstrings/loggers.py</code> <pre><code>def __init__(self, logger: LoggerAdapter):\n\"\"\"Initialize the object.\n\n    Arguments:\n        logger: A logger adapter.\n    \"\"\"\n    self.debug = get_template_logger_function(logger.debug)\n    self.info = get_template_logger_function(logger.info)\n    self.warning = get_template_logger_function(logger.warning)\n    self.error = get_template_logger_function(logger.error)\n    self.critical = get_template_logger_function(logger.critical)\n</code></pre>"},{"location":"reference/loggers/#mkdocstrings.loggers.get_logger","title":"<code>get_logger(name)</code>","text":"<p>Return a pre-configured logger.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name to use with <code>logging.getLogger</code>.</p> required <p>Returns:</p> Type Description <code>LoggerAdapter</code> <p>A logger configured to work well in MkDocs.</p> Source code in <code>mkdocstrings/loggers.py</code> <pre><code>def get_logger(name: str) -&gt; LoggerAdapter:\n\"\"\"Return a pre-configured logger.\n\n    Arguments:\n        name: The name to use with `logging.getLogger`.\n\n    Returns:\n        A logger configured to work well in MkDocs.\n    \"\"\"\n    logger = logging.getLogger(f\"mkdocs.plugins.{name}\")\n    logger.addFilter(warning_filter)\n    return LoggerAdapter(name.split(\".\", 1)[0], logger)\n</code></pre>"},{"location":"reference/loggers/#mkdocstrings.loggers.get_template_logger","title":"<code>get_template_logger()</code>","text":"<p>Return a logger usable in templates.</p> <p>Returns:</p> Type Description <code>TemplateLogger</code> <p>A template logger.</p> Source code in <code>mkdocstrings/loggers.py</code> <pre><code>def get_template_logger() -&gt; TemplateLogger:\n\"\"\"Return a logger usable in templates.\n\n    Returns:\n        A template logger.\n    \"\"\"\n    return TemplateLogger(get_logger(\"mkdocstrings.templates\"))\n</code></pre>"},{"location":"reference/loggers/#mkdocstrings.loggers.get_template_logger_function","title":"<code>get_template_logger_function(logger_func)</code>","text":"<p>Create a wrapper function that automatically receives the Jinja template context.</p> <p>Parameters:</p> Name Type Description Default <code>logger_func</code> <code>Callable</code> <p>The logger function to use within the wrapper.</p> required <p>Returns:</p> Type Description <code>Callable</code> <p>A function.</p> Source code in <code>mkdocstrings/loggers.py</code> <pre><code>def get_template_logger_function(logger_func: Callable) -&gt; Callable:\n\"\"\"Create a wrapper function that automatically receives the Jinja template context.\n\n    Arguments:\n        logger_func: The logger function to use within the wrapper.\n\n    Returns:\n        A function.\n    \"\"\"\n\n    @pass_context\n    def wrapper(context: Context, msg: Optional[str] = None) -&gt; str:\n\"\"\"Log a message.\n\n        Arguments:\n            context: The template context, automatically provided by Jinja.\n            msg: The message to log.\n\n        Returns:\n            An empty string.\n        \"\"\"\n        template_path = get_template_path(context)\n        logger_func(f\"{template_path}: {msg or 'Rendering'}\")\n        return \"\"\n\n    return wrapper\n</code></pre>"},{"location":"reference/loggers/#mkdocstrings.loggers.get_template_path","title":"<code>get_template_path(context)</code>","text":"<p>Return the path to the template currently using the given context.</p> <p>Parameters:</p> Name Type Description Default <code>context</code> <code>Context</code> <p>The template context.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The relative path to the template.</p> Source code in <code>mkdocstrings/loggers.py</code> <pre><code>def get_template_path(context: Context) -&gt; str:\n\"\"\"Return the path to the template currently using the given context.\n\n    Arguments:\n        context: The template context.\n\n    Returns:\n        The relative path to the template.\n    \"\"\"\n    context_name: str = str(context.name)\n    filename = context.environment.get_template(context_name).filename\n    if filename:\n        for template_dir in TEMPLATES_DIRS:\n            with suppress(ValueError):\n                return str(Path(filename).relative_to(template_dir))\n        with suppress(ValueError):\n            return str(Path(filename).relative_to(Path.cwd()))\n        return filename\n    return context_name\n</code></pre>"},{"location":"reference/plugin/","title":"plugin","text":"<p>This module contains the \"mkdocstrings\" plugin for MkDocs.</p> <p>The plugin instantiates a Markdown extension (<code>MkdocstringsExtension</code>), and adds it to the list of Markdown extensions used by <code>mkdocs</code> during the <code>on_config</code> event hook.</p> <p>Once the documentation is built, the <code>on_post_build</code> event hook is triggered and calls the <code>handlers.teardown()</code> method. This method is used to teardown the handlers that were instantiated during documentation buildup.</p> <p>Finally, when serving the documentation, it can add directories to watch during the <code>on_serve</code> event hook.</p>"},{"location":"reference/plugin/#mkdocstrings.plugin.RENDERING_OPTS_KEY","title":"<code>RENDERING_OPTS_KEY: str = 'rendering'</code>  <code>module-attribute</code>","text":"<p>The name of the rendering parameter in YAML configuration blocks.</p>"},{"location":"reference/plugin/#mkdocstrings.plugin.SELECTION_OPTS_KEY","title":"<code>SELECTION_OPTS_KEY: str = 'selection'</code>  <code>module-attribute</code>","text":"<p>The name of the selection parameter in YAML configuration blocks.</p>"},{"location":"reference/plugin/#mkdocstrings.plugin.MkdocstringsPlugin","title":"<code>MkdocstringsPlugin()</code>","text":"<p>         Bases: <code>BasePlugin</code></p> <p>An <code>mkdocs</code> plugin.</p> <p>This plugin defines the following event hooks:</p> <ul> <li><code>on_config</code></li> <li><code>on_env</code></li> <li><code>on_post_build</code></li> <li><code>on_serve</code></li> </ul> <p>Check the Developing Plugins page of <code>mkdocs</code> for more information about its plugin system.</p> Source code in <code>mkdocstrings/plugin.py</code> <pre><code>def __init__(self) -&gt; None:\n\"\"\"Initialize the object.\"\"\"\n    super().__init__()\n    self._handlers: Optional[Handlers] = None\n</code></pre>"},{"location":"reference/plugin/#mkdocstrings.plugin.MkdocstringsPlugin.config_scheme","title":"<code>config_scheme: Tuple[Tuple[str, MkType]] = (('watch', MkType(list, default=[])), ('handlers', MkType(dict, default={})), ('default_handler', MkType(str, default='python')), ('custom_templates', MkType(str, default=None)), ('enable_inventory', MkType(bool, default=None)), ('enabled', MkType(bool, default=True)))</code>  <code>class-attribute</code>","text":"<p>The configuration options of <code>mkdocstrings</code>, written in <code>mkdocs.yml</code>.</p> <p>Available options are:</p> <ul> <li><code>watch</code> (deprecated): A list of directories to watch. Only used when serving the documentation with mkdocs.    Whenever a file changes in one of directories, the whole documentation is built again, and the browser refreshed.    Deprecated in favor of the now built-in <code>watch</code> feature of MkDocs.</li> <li><code>default_handler</code>: The default handler to use. The value is the name of the handler module. Default is \"python\".</li> <li><code>enabled</code>: Whether to enable the plugin. Default is true. If false, mkdocstrings will not collect or render anything.</li> <li><code>handlers</code>: Global configuration of handlers. You can set global configuration per handler, applied everywhere,   but overridable in each \"autodoc\" instruction. Example:</li> </ul> <pre><code>plugins:\n- mkdocstrings:\nhandlers:\npython:\noptions:\nselection_opt: true\nrendering_opt: \"value\"\nrust:\noptions:\nselection_opt: 2\n</code></pre>"},{"location":"reference/plugin/#mkdocstrings.plugin.MkdocstringsPlugin.handlers","title":"<code>handlers: Handlers</code>  <code>property</code>","text":"<p>Get the instance of mkdocstrings.handlers.base.Handlers for this plugin/build.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If the plugin hasn't been initialized with a config.</p> <p>Returns:</p> Type Description <code>Handlers</code> <p>An instance of mkdocstrings.handlers.base.Handlers (the same throughout the build).</p>"},{"location":"reference/plugin/#mkdocstrings.plugin.MkdocstringsPlugin.inventory_enabled","title":"<code>inventory_enabled: bool</code>  <code>property</code>","text":"<p>Tell if the inventory is enabled or not.</p> <p>Returns:</p> Type Description <code>bool</code> <p>Whether the inventory is enabled.</p>"},{"location":"reference/plugin/#mkdocstrings.plugin.MkdocstringsPlugin.plugin_enabled","title":"<code>plugin_enabled: bool</code>  <code>property</code>","text":"<p>Tell if the plugin is enabled or not.</p> <p>Returns:</p> Type Description <code>bool</code> <p>Whether the plugin is enabled.</p>"},{"location":"reference/plugin/#mkdocstrings.plugin.MkdocstringsPlugin.get_handler","title":"<code>get_handler(handler_name)</code>","text":"<p>Get a handler by its name. See mkdocstrings.handlers.base.Handlers.get_handler.</p> <p>Parameters:</p> Name Type Description Default <code>handler_name</code> <code>str</code> <p>The name of the handler.</p> required <p>Returns:</p> Type Description <code>BaseHandler</code> <p>An instance of a subclass of <code>BaseHandler</code>.</p> Source code in <code>mkdocstrings/plugin.py</code> <pre><code>def get_handler(self, handler_name: str) -&gt; BaseHandler:\n\"\"\"Get a handler by its name. See [mkdocstrings.handlers.base.Handlers.get_handler][].\n\n    Arguments:\n        handler_name: The name of the handler.\n\n    Returns:\n        An instance of a subclass of [`BaseHandler`][mkdocstrings.handlers.base.BaseHandler].\n    \"\"\"\n    return self.handlers.get_handler(handler_name)\n</code></pre>"},{"location":"reference/plugin/#mkdocstrings.plugin.MkdocstringsPlugin.on_config","title":"<code>on_config(config, **kwargs)</code>","text":"<p>Instantiate our Markdown extension.</p> <p>Hook for the <code>on_config</code> event. In this hook, we instantiate our <code>MkdocstringsExtension</code> and add it to the list of Markdown extensions used by <code>mkdocs</code>.</p> <p>We pass this plugin's configuration dictionary to the extension when instantiating it (it will need it later when processing markdown to get handlers and their global configurations).</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>Config</code> <p>The MkDocs config object.</p> required <code>**kwargs</code> <code>Any</code> <p>Additional arguments passed by MkDocs.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Config</code> <p>The modified config.</p> Source code in <code>mkdocstrings/plugin.py</code> <pre><code>def on_config(self, config: Config, **kwargs: Any) -&gt; Config:  # noqa: W0613 (unused arguments)\n\"\"\"Instantiate our Markdown extension.\n\n    Hook for the [`on_config` event](https://www.mkdocs.org/user-guide/plugins/#on_config).\n    In this hook, we instantiate our [`MkdocstringsExtension`][mkdocstrings.extension.MkdocstringsExtension]\n    and add it to the list of Markdown extensions used by `mkdocs`.\n\n    We pass this plugin's configuration dictionary to the extension when instantiating it (it will need it\n    later when processing markdown to get handlers and their global configurations).\n\n    Arguments:\n        config: The MkDocs config object.\n        **kwargs: Additional arguments passed by MkDocs.\n\n    Returns:\n        The modified config.\n    \"\"\"\n    if not self.plugin_enabled:\n        log.debug(\"Plugin is not enabled. Skipping.\")\n        return config\n    log.debug(\"Adding extension to the list\")\n\n    theme_name = None\n    if config[\"theme\"].name is None:\n        theme_name = os.path.dirname(config[\"theme\"].dirs[0])\n    else:\n        theme_name = config[\"theme\"].name\n\n    to_import: InventoryImportType = []\n    for handler_name, conf in self.config[\"handlers\"].items():\n        for import_item in conf.pop(\"import\", ()):\n            if isinstance(import_item, str):\n                import_item = {\"url\": import_item}\n            to_import.append((handler_name, import_item))\n\n    extension_config = {\n        \"site_name\": config[\"site_name\"],\n        \"config_file_path\": config[\"config_file_path\"],\n        \"theme_name\": theme_name,\n        \"mdx\": config[\"markdown_extensions\"],\n        \"mdx_configs\": config[\"mdx_configs\"],\n        \"mkdocstrings\": self.config,\n    }\n    self._handlers = Handlers(extension_config)\n\n    try:  # noqa: WPS229\n        # If autorefs plugin is explicitly enabled, just use it.\n        autorefs = config[\"plugins\"][\"autorefs\"]\n        log.debug(f\"Picked up existing autorefs instance {autorefs!r}\")\n    except KeyError:\n        # Otherwise, add a limited instance of it that acts only on what's added through `register_anchor`.\n        autorefs = AutorefsPlugin()\n        autorefs.scan_toc = False\n        config[\"plugins\"][\"autorefs\"] = autorefs\n        log.debug(f\"Added a subdued autorefs instance {autorefs!r}\")\n    # Add collector-based fallback in either case.\n    autorefs.get_fallback_anchor = self.handlers.get_anchors\n\n    mkdocstrings_extension = MkdocstringsExtension(extension_config, self.handlers, autorefs)\n    config[\"markdown_extensions\"].append(mkdocstrings_extension)\n\n    config[\"extra_css\"].insert(0, self.css_filename)  # So that it has lower priority than user files.\n\n    self._inv_futures = []\n    if to_import:\n        inv_loader = futures.ThreadPoolExecutor(4)\n        for handler_name, import_item in to_import:  # noqa: WPS440\n            future = inv_loader.submit(\n                self._load_inventory, self.get_handler(handler_name).load_inventory, **import_item\n            )\n            self._inv_futures.append(future)\n        inv_loader.shutdown(wait=False)\n\n    if self.config[\"watch\"]:\n        self._warn_about_watch_option()\n\n    return config\n</code></pre>"},{"location":"reference/plugin/#mkdocstrings.plugin.MkdocstringsPlugin.on_env","title":"<code>on_env(env, config, *args, **kwargs)</code>","text":"<p>Extra actions that need to happen after all Markdown rendering and before HTML rendering.</p> <p>Hook for the <code>on_env</code> event.</p> <ul> <li>Write mkdocstrings' extra files into the site dir.</li> <li>Gather results from background inventory download tasks.</li> </ul> Source code in <code>mkdocstrings/plugin.py</code> <pre><code>def on_env(self, env, config: Config, *args, **kwargs) -&gt; None:\n\"\"\"Extra actions that need to happen after all Markdown rendering and before HTML rendering.\n\n    Hook for the [`on_env` event](https://www.mkdocs.org/user-guide/plugins/#on_env).\n\n    - Write mkdocstrings' extra files into the site dir.\n    - Gather results from background inventory download tasks.\n    \"\"\"\n    if not self.plugin_enabled:\n        return\n    if self._handlers:\n        css_content = \"\\n\".join(handler.extra_css for handler in self.handlers.seen_handlers)\n        write_file(css_content.encode(\"utf-8\"), os.path.join(config[\"site_dir\"], self.css_filename))\n\n        if self.inventory_enabled:\n            log.debug(\"Creating inventory file objects.inv\")\n            inv_contents = self.handlers.inventory.format_sphinx()\n            write_file(inv_contents, os.path.join(config[\"site_dir\"], \"objects.inv\"))\n\n    if self._inv_futures:\n        log.debug(f\"Waiting for {len(self._inv_futures)} inventory download(s)\")\n        futures.wait(self._inv_futures, timeout=30)\n        for page, identifier in collections.ChainMap(*(fut.result() for fut in self._inv_futures)).items():\n            config[\"plugins\"][\"autorefs\"].register_url(page, identifier)\n        self._inv_futures = []\n</code></pre>"},{"location":"reference/plugin/#mkdocstrings.plugin.MkdocstringsPlugin.on_post_build","title":"<code>on_post_build(config, **kwargs)</code>","text":"<p>Teardown the handlers.</p> <p>Hook for the <code>on_post_build</code> event. This hook is used to teardown all the handlers that were instantiated and cached during documentation buildup.</p> <p>For example, a handler could open a subprocess in the background and keep it open to feed it \"autodoc\" instructions and get back JSON data. If so, it should then close the subprocess at some point: the proper place to do this is in the collector's <code>teardown</code> method, which is indirectly called by this hook.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>Config</code> <p>The MkDocs config object.</p> required <code>**kwargs</code> <code>Any</code> <p>Additional arguments passed by MkDocs.</p> <code>{}</code> Source code in <code>mkdocstrings/plugin.py</code> <pre><code>def on_post_build(\n    self, config: Config, **kwargs: Any\n) -&gt; None:  # noqa: W0613,R0201 (unused arguments, cannot be static)\n\"\"\"Teardown the handlers.\n\n    Hook for the [`on_post_build` event](https://www.mkdocs.org/user-guide/plugins/#on_post_build).\n    This hook is used to teardown all the handlers that were instantiated and cached during documentation buildup.\n\n    For example, a handler could open a subprocess in the background and keep it open\n    to feed it \"autodoc\" instructions and get back JSON data. If so, it should then close the subprocess at some point:\n    the proper place to do this is in the collector's `teardown` method, which is indirectly called by this hook.\n\n    Arguments:\n        config: The MkDocs config object.\n        **kwargs: Additional arguments passed by MkDocs.\n    \"\"\"\n    if not self.plugin_enabled:\n        return\n\n    for future in self._inv_futures:\n        future.cancel()\n\n    if self._handlers:\n        log.debug(\"Tearing handlers down\")\n        self.handlers.teardown()\n</code></pre>"},{"location":"reference/plugin/#mkdocstrings.plugin.MkdocstringsPlugin.on_serve","title":"<code>on_serve(server, config, builder, *args, **kwargs)</code>","text":"<p>Watch directories.</p> <p>Hook for the <code>on_serve</code> event. In this hook, we add the directories specified in the plugin's configuration to the list of directories watched by <code>mkdocs</code>. Whenever a change occurs in one of these directories, the documentation is built again and the site reloaded.</p> <p>Parameters:</p> Name Type Description Default <code>server</code> <code>LiveReloadServer</code> <p>The <code>livereload</code> server instance.</p> required <code>config</code> <code>Config</code> <p>The MkDocs config object (unused).</p> required <code>builder</code> <code>Callable</code> <p>The function to build the site.</p> required <code>*args</code> <code>Any</code> <p>Additional arguments passed by MkDocs.</p> <code>()</code> <code>**kwargs</code> <code>Any</code> <p>Additional arguments passed by MkDocs.</p> <code>{}</code> Source code in <code>mkdocstrings/plugin.py</code> <pre><code>def on_serve(\n    self, server: LiveReloadServer, config: Config, builder: Callable, *args: Any, **kwargs: Any\n) -&gt; None:  # noqa: W0613 (unused arguments)\n\"\"\"Watch directories.\n\n    Hook for the [`on_serve` event](https://www.mkdocs.org/user-guide/plugins/#on_serve).\n    In this hook, we add the directories specified in the plugin's configuration to the list of directories\n    watched by `mkdocs`. Whenever a change occurs in one of these directories, the documentation is built again\n    and the site reloaded.\n\n    Arguments:\n        server: The `livereload` server instance.\n        config: The MkDocs config object (unused).\n        builder: The function to build the site.\n        *args: Additional arguments passed by MkDocs.\n        **kwargs: Additional arguments passed by MkDocs.\n    \"\"\"\n    if not self.plugin_enabled:\n        return\n    if self.config[\"watch\"]:\n        for element in self.config[\"watch\"]:\n            log.debug(f\"Adding directory '{element}' to watcher\")\n            server.watch(element, builder)\n</code></pre>"},{"location":"reference/plugin/#mkdocstrings.plugin.list_to_tuple","title":"<code>list_to_tuple(function)</code>","text":"<p>Decorater to convert lists to tuples in the arguments.</p> Source code in <code>mkdocstrings/plugin.py</code> <pre><code>def list_to_tuple(function: Callable[..., Any]) -&gt; Callable[..., Any]:\n\"\"\"Decorater to convert lists to tuples in the arguments.\"\"\"\n\n    def wrapper(*args: Any, **kwargs: Any):\n        safe_args = [tuple(item) if isinstance(item, list) else item for item in args]\n        if kwargs:\n            kwargs = {key: tuple(value) if isinstance(value, list) else value for key, value in kwargs.items()}\n        return function(*safe_args, **kwargs)\n\n    return wrapper\n</code></pre>"},{"location":"reference/autorefs/plugin/","title":"Plugin","text":"<p>Redirecting...</p>"},{"location":"reference/autorefs/references/","title":"References","text":"<p>Redirecting...</p>"},{"location":"reference/handlers/base/","title":"base","text":"<p>Base module for handlers.</p> <p>This module contains the base classes for implementing collectors, renderers, and the combination of the two: handlers.</p> <p>It also provides two methods:</p> <ul> <li><code>get_handler</code>, that will cache handlers into the <code>HANDLERS_CACHE</code> dictionary.</li> <li><code>teardown</code>, that will teardown all the cached handlers, and then clear the cache.</li> </ul>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.BaseCollector","title":"<code>BaseCollector</code>","text":"<p>The base collector class.</p> <p>Inherit from this class to implement a collector.</p> <p>You will have to implement the <code>collect</code> method. You can also implement the <code>teardown</code> method.</p>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.BaseCollector.collect","title":"<code>collect(identifier, config)</code>","text":"<p>Collect data given an identifier and selection configuration.</p> <p>In the implementation, you typically call a subprocess that returns JSON, and load that JSON again into a Python dictionary for example, though the implementation is completely free.</p> <p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>An identifier for which to collect data. For example, in Python, it would be 'mkdocstrings.handlers' to collect documentation about the handlers module. It can be anything that you can feed to the tool of your choice.</p> required <code>config</code> <code>Mapping[str, Any]</code> <p>The handler's configuraton options.</p> required <p>Returns:</p> Type Description <code>CollectorItem</code> <p>Anything you want, as long as you can feed it to the renderer's <code>render</code> method.</p> Source code in <code>mkdocstrings/handlers/base.py</code> <pre><code>def collect(self, identifier: str, config: Mapping[str, Any]) -&gt; CollectorItem:\n\"\"\"Collect data given an identifier and selection configuration.\n\n    In the implementation, you typically call a subprocess that returns JSON, and load that JSON again into\n    a Python dictionary for example, though the implementation is completely free.\n\n    Arguments:\n        identifier: An identifier for which to collect data. For example, in Python,\n            it would be 'mkdocstrings.handlers' to collect documentation about the handlers module.\n            It can be anything that you can feed to the tool of your choice.\n        config: The handler's configuraton options.\n\n    Returns:\n        Anything you want, as long as you can feed it to the renderer's `render` method.\n    \"\"\"  # noqa: DAR202,DAR401\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.BaseCollector.teardown","title":"<code>teardown()</code>","text":"<p>Teardown the collector.</p> <p>This method should be implemented to, for example, terminate a subprocess that was started when creating the collector instance.</p> Source code in <code>mkdocstrings/handlers/base.py</code> <pre><code>def teardown(self) -&gt; None:\n\"\"\"Teardown the collector.\n\n    This method should be implemented to, for example, terminate a subprocess\n    that was started when creating the collector instance.\n    \"\"\"\n</code></pre>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.BaseHandler","title":"<code>BaseHandler(*args, **kwargs)</code>","text":"<p>         Bases: <code>BaseCollector</code>, <code>BaseRenderer</code></p> <p>The base handler class.</p> <p>Inherit from this class to implement a handler.</p> <p>It's usually just a combination of a collector and a renderer, but you can make it as complex as you need.</p> <p>Attributes:</p> Name Type Description <code>domain</code> <code>str</code> <p>The cross-documentation domain/language for this handler.</p> <code>enable_inventory</code> <code>bool</code> <p>Whether this handler is interested in enabling the creation of the <code>objects.inv</code> Sphinx inventory file.</p> <code>fallback_config</code> <code>dict</code> <p>The configuration used to collect item during autorefs fallback.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <code>str | BaseCollector | BaseRenderer</code> <p>Collector and renderer, or handler name, theme and custom_templates.</p> <code>()</code> <code>**kwargs</code> <code>str | BaseCollector | BaseRenderer</code> <p>Same thing, but with keyword arguments.</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>When the givin parameters are invalid.</p> Source code in <code>mkdocstrings/handlers/base.py</code> <pre><code>def __init__(self, *args: str | BaseCollector | BaseRenderer, **kwargs: str | BaseCollector | BaseRenderer) -&gt; None:\n\"\"\"Initialize the object.\n\n    Arguments:\n        *args: Collector and renderer, or handler name, theme and custom_templates.\n        **kwargs: Same thing, but with keyword arguments.\n\n    Raises:\n        ValueError: When the givin parameters are invalid.\n    \"\"\"\n    # The method accepts *args and **kwargs temporarily,\n    # to support the transition period where the BaseCollector\n    # and BaseRenderer are deprecated, and the BaseHandler\n    # can be instantiated with both instances of collector/renderer,\n    # or renderer parameters, as positional parameters.\n    # Supported:\n    #   handler = Handler(collector, renderer)\n    #   handler = Handler(collector=collector, renderer=renderer)\n    #   handler = Handler(\"python\", \"material\")\n    #   handler = Handler(\"python\", \"material\", \"templates\")\n    #   handler = Handler(handler=\"python\", theme=\"material\")\n    #   handler = Handler(handler=\"python\", theme=\"material\", custom_templates=\"templates\")\n    # Invalid:\n    #   handler = Handler(\"python\", \"material\", collector, renderer)\n    #   handler = Handler(\"python\", theme=\"material\", collector=collector)\n    #   handler = Handler(collector, renderer, \"material\")\n    #   handler = Handler(collector, renderer, theme=\"material\")\n    #   handler = Handler(collector)\n    #   handler = Handler(renderer)\n    #   etc.\n\n    collector = None\n    renderer = None\n\n    # parsing positional arguments\n    str_args = []\n    for arg in args:\n        if isinstance(arg, BaseCollector):\n            collector = arg\n        elif isinstance(arg, BaseRenderer):\n            renderer = arg\n        elif isinstance(arg, str):\n            str_args.append(arg)\n\n    while len(str_args) != 3:\n        str_args.append(None)  # type: ignore[arg-type]\n\n    handler, theme, custom_templates = str_args\n\n    # fetching values from keyword arguments\n    if \"collector\" in kwargs:\n        collector = kwargs.pop(\"collector\")  # type: ignore[assignment]\n    if \"renderer\" in kwargs:\n        renderer = kwargs.pop(\"renderer\")  # type: ignore[assignment]\n    if \"handler\" in kwargs:\n        handler = kwargs.pop(\"handler\")  # type: ignore[assignment]\n    if \"theme\" in kwargs:\n        theme = kwargs.pop(\"theme\")  # type: ignore[assignment]\n    if \"custom_templates\" in kwargs:\n        custom_templates = kwargs.pop(\"custom_templates\")  # type: ignore[assignment]\n\n    if collector is None and renderer is not None or collector is not None and renderer is None:\n        raise ValueError(\"both 'collector' and 'renderer' must be provided\")\n\n    if collector is not None:\n        warnings.warn(\n            DeprecationWarning(\n                \"The BaseCollector class is deprecated, and passing an instance of it \"\n                \"to your handler is deprecated as well. Instead, define the `collect` and `teardown` \"\n                \"methods directly on your handler class.\"\n            )\n        )\n        self.collector = collector\n        self.collect = collector.collect  # type: ignore[assignment]\n        self.teardown = collector.teardown  # type: ignore[assignment]\n\n    if renderer is not None:\n        if {handler, theme, custom_templates} != {None}:\n            raise ValueError(\n                \"'handler', 'theme' and 'custom_templates' must all be None when providing a renderer instance\"\n            )\n        warnings.warn(\n            DeprecationWarning(\n                \"The BaseRenderer class is deprecated, and passing an instance of it \"\n                \"to your handler is deprecated as well. Instead, define the `render` method \"\n                \"directly on your handler class (as well as other methods and attributes like \"\n                \"`get_templates_dir`, `get_anchors`, `update_env` and `fallback_theme`, `extra_css`).\"\n            )\n        )\n        self.renderer = renderer\n        self.render = renderer.render  # type: ignore[assignment]\n        self.get_templates_dir = renderer.get_templates_dir  # type: ignore[assignment]\n        self.get_anchors = renderer.get_anchors  # type: ignore[assignment]\n        self.do_convert_markdown = renderer.do_convert_markdown  # type: ignore[assignment]\n        self.do_heading = renderer.do_heading  # type: ignore[assignment]\n        self.get_headings = renderer.get_headings  # type: ignore[assignment]\n        self.update_env = renderer.update_env  # type: ignore[assignment]\n        self._update_env = renderer._update_env  # type: ignore[assignment]  # noqa: WPS437\n        self.fallback_theme = renderer.fallback_theme\n        self.extra_css = renderer.extra_css\n        renderer.__class__.__init__(  # noqa: WPS609\n            self,\n            renderer._handler,  # noqa: WPS437\n            renderer._theme,  # noqa: WPS437\n            renderer._custom_templates,  # noqa: WPS437\n        )\n    else:\n        if handler is None or theme is None:\n            raise ValueError(\"'handler' and 'theme' cannot be None\")\n        BaseRenderer.__init__(self, handler, theme, custom_templates)  # noqa: WPS609\n</code></pre>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.BaseHandler.load_inventory","title":"<code>load_inventory(in_file, url, base_url=None, **kwargs)</code>  <code>classmethod</code>","text":"<p>Yield items and their URLs from an inventory file streamed from <code>in_file</code>.</p> <p>Parameters:</p> Name Type Description Default <code>in_file</code> <code>BinaryIO</code> <p>The binary file-like object to read the inventory from.</p> required <code>url</code> <code>str</code> <p>The URL that this file is being streamed from (used to guess <code>base_url</code>).</p> required <code>base_url</code> <code>Optional[str]</code> <p>The URL that this inventory's sub-paths are relative to.</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Ignore additional arguments passed from the config.</p> <code>{}</code> <p>Yields:</p> Type Description <code>Iterator[tuple[str, str]]</code> <p>Tuples of (item identifier, item URL).</p> Source code in <code>mkdocstrings/handlers/base.py</code> <pre><code>@classmethod\ndef load_inventory(\n    cls,\n    in_file: BinaryIO,\n    url: str,\n    base_url: Optional[str] = None,\n    **kwargs: Any,\n) -&gt; Iterator[tuple[str, str]]:\n\"\"\"Yield items and their URLs from an inventory file streamed from `in_file`.\n\n    Arguments:\n        in_file: The binary file-like object to read the inventory from.\n        url: The URL that this file is being streamed from (used to guess `base_url`).\n        base_url: The URL that this inventory's sub-paths are relative to.\n        **kwargs: Ignore additional arguments passed from the config.\n\n    Yields:\n        Tuples of (item identifier, item URL).\n    \"\"\"\n    yield from ()\n</code></pre>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.BaseRenderer","title":"<code>BaseRenderer(handler, theme, custom_templates=None)</code>","text":"<p>The base renderer class.</p> <p>Inherit from this class to implement a renderer.</p> <p>You will have to implement the <code>render</code> method. You can also override the <code>update_env</code> method, to add more filters to the Jinja environment, making them available in your Jinja templates.</p> <p>To define a fallback theme, add a <code>fallback_theme</code> class-variable. To add custom CSS, add an <code>extra_css</code> variable or create an 'style.css' file beside the templates.</p> <p>If the given theme is not supported (it does not exist), it will look for a <code>fallback_theme</code> attribute in <code>self</code> to use as a fallback theme.</p> <p>Parameters:</p> Name Type Description Default <code>handler</code> <code>str</code> <p>The name of the handler.</p> required <code>theme</code> <code>str</code> <p>The name of theme to use.</p> required <code>custom_templates</code> <code>Optional[str]</code> <p>Directory containing custom templates.</p> <code>None</code> Source code in <code>mkdocstrings/handlers/base.py</code> <pre><code>def __init__(self, handler: str, theme: str, custom_templates: Optional[str] = None) -&gt; None:\n\"\"\"Initialize the object.\n\n    If the given theme is not supported (it does not exist), it will look for a `fallback_theme` attribute\n    in `self` to use as a fallback theme.\n\n    Arguments:\n        handler: The name of the handler.\n        theme: The name of theme to use.\n        custom_templates: Directory containing custom templates.\n    \"\"\"\n    paths = []\n\n    # TODO: remove once BaseRenderer is merged into BaseHandler\n    self._handler = handler\n    self._theme = theme\n    self._custom_templates = custom_templates\n\n    themes_dir = self.get_templates_dir(handler)\n    paths.append(themes_dir / theme)\n\n    if self.fallback_theme and self.fallback_theme != theme:\n        paths.append(themes_dir / self.fallback_theme)\n\n    for path in paths:\n        css_path = path / \"style.css\"\n        if css_path.is_file():\n            self.extra_css += \"\\n\" + css_path.read_text(encoding=\"utf-8\")  # noqa: WPS601\n            break\n\n    if custom_templates is not None:\n        paths.insert(0, Path(custom_templates) / handler / theme)\n\n    self.env = Environment(\n        autoescape=True,\n        loader=FileSystemLoader(paths),\n        auto_reload=False,  # Editing a template in the middle of a build is not useful.\n    )\n    self.env.filters[\"any\"] = do_any\n    self.env.globals[\"log\"] = get_template_logger()\n\n    self._headings: List[Element] = []\n    self._md: Markdown = None  # type: ignore  # To be populated in `update_env`.\n</code></pre>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.BaseRenderer.do_convert_markdown","title":"<code>do_convert_markdown(text, heading_level, html_id='', *, strip_paragraph=False)</code>","text":"<p>Render Markdown text; for use inside templates.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to convert.</p> required <code>heading_level</code> <code>int</code> <p>The base heading level to start all Markdown headings from.</p> required <code>html_id</code> <code>str</code> <p>The HTML id of the element that's considered the parent of this element.</p> <code>''</code> <code>strip_paragraph</code> <code>bool</code> <p>Whether to exclude the <p> tag from around the whole output.</p> <code>False</code> <p>Returns:</p> Type Description <code>Markup</code> <p>An HTML string.</p> Source code in <code>mkdocstrings/handlers/base.py</code> <pre><code>def do_convert_markdown(\n    self, text: str, heading_level: int, html_id: str = \"\", *, strip_paragraph: bool = False\n) -&gt; Markup:\n\"\"\"Render Markdown text; for use inside templates.\n\n    Arguments:\n        text: The text to convert.\n        heading_level: The base heading level to start all Markdown headings from.\n        html_id: The HTML id of the element that's considered the parent of this element.\n        strip_paragraph: Whether to exclude the &lt;p&gt; tag from around the whole output.\n\n    Returns:\n        An HTML string.\n    \"\"\"\n    treeprocessors = self._md.treeprocessors\n    treeprocessors[HeadingShiftingTreeprocessor.name].shift_by = heading_level\n    treeprocessors[IdPrependingTreeprocessor.name].id_prefix = html_id and html_id + \"--\"\n    treeprocessors[ParagraphStrippingTreeprocessor.name].strip = strip_paragraph\n    try:\n        return Markup(self._md.convert(text))\n    finally:\n        treeprocessors[HeadingShiftingTreeprocessor.name].shift_by = 0\n        treeprocessors[IdPrependingTreeprocessor.name].id_prefix = \"\"\n        treeprocessors[ParagraphStrippingTreeprocessor.name].strip = False\n        self._md.reset()\n</code></pre>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.BaseRenderer.do_heading","title":"<code>do_heading(content, heading_level, *, role=None, hidden=False, toc_label=None, **attributes)</code>","text":"<p>Render an HTML heading and register it for the table of contents. For use inside templates.</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>str</code> <p>The HTML within the heading.</p> required <code>heading_level</code> <code>int</code> <p>The level of heading (e.g. 3 -&gt; <code>h3</code>).</p> required <code>role</code> <code>Optional[str]</code> <p>An optional role for the object bound to this heading.</p> <code>None</code> <code>hidden</code> <code>bool</code> <p>If True, only register it for the table of contents, don't render anything.</p> <code>False</code> <code>toc_label</code> <code>Optional[str]</code> <p>The title to use in the table of contents ('data-toc-label' attribute).</p> <code>None</code> <code>**attributes</code> <code>str</code> <p>Any extra HTML attributes of the heading.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Markup</code> <p>An HTML string.</p> Source code in <code>mkdocstrings/handlers/base.py</code> <pre><code>def do_heading(\n    self,\n    content: str,\n    heading_level: int,\n    *,\n    role: Optional[str] = None,\n    hidden: bool = False,\n    toc_label: Optional[str] = None,\n    **attributes: str,\n) -&gt; Markup:\n\"\"\"Render an HTML heading and register it for the table of contents. For use inside templates.\n\n    Arguments:\n        content: The HTML within the heading.\n        heading_level: The level of heading (e.g. 3 -&gt; `h3`).\n        role: An optional role for the object bound to this heading.\n        hidden: If True, only register it for the table of contents, don't render anything.\n        toc_label: The title to use in the table of contents ('data-toc-label' attribute).\n        **attributes: Any extra HTML attributes of the heading.\n\n    Returns:\n        An HTML string.\n    \"\"\"\n    # First, produce the \"fake\" heading, for ToC only.\n    el = Element(f\"h{heading_level}\", attributes)\n    if toc_label is None:\n        toc_label = content.unescape() if isinstance(el, Markup) else content  # type: ignore\n    el.set(\"data-toc-label\", toc_label)\n    if role:\n        el.set(\"data-role\", role)\n    self._headings.append(el)\n\n    if hidden:\n        return Markup('&lt;a id=\"{0}\"&gt;&lt;/a&gt;').format(attributes[\"id\"])\n\n    # Now produce the actual HTML to be rendered. The goal is to wrap the HTML content into a heading.\n    # Start with a heading that has just attributes (no text), and add a placeholder into it.\n    el = Element(f\"h{heading_level}\", attributes)\n    el.append(Element(\"mkdocstrings-placeholder\"))\n    # Tell the 'toc' extension to make its additions if configured so.\n    toc = self._md.treeprocessors[\"toc\"]\n    if toc.use_anchors:\n        toc.add_anchor(el, attributes[\"id\"])\n    if toc.use_permalinks:\n        toc.add_permalink(el, attributes[\"id\"])\n\n    # The content we received is HTML, so it can't just be inserted into the tree. We had marked the middle\n    # of the heading with a placeholder that can never occur (text can't directly contain angle brackets).\n    # Now this HTML wrapper can be \"filled\" by replacing the placeholder.\n    html_with_placeholder = tostring(el, encoding=\"unicode\")\n    assert (\n        html_with_placeholder.count(\"&lt;mkdocstrings-placeholder /&gt;\") == 1\n    ), f\"Bug in mkdocstrings: failed to replace in {html_with_placeholder!r}\"\n    html = html_with_placeholder.replace(\"&lt;mkdocstrings-placeholder /&gt;\", content)\n    return Markup(html)\n</code></pre>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.BaseRenderer.get_anchors","title":"<code>get_anchors(data)</code>","text":"<p>Return the possible identifiers (HTML anchors) for a collected item.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>CollectorItem</code> <p>The collected data.</p> required <p>Returns:</p> Type Description <code>Sequence[str]</code> <p>The HTML anchors (without '#'), or an empty tuple if this item doesn't have an anchor.</p> Source code in <code>mkdocstrings/handlers/base.py</code> <pre><code>def get_anchors(self, data: CollectorItem) -&gt; Sequence[str]:\n\"\"\"Return the possible identifiers (HTML anchors) for a collected item.\n\n    Arguments:\n        data: The collected data.\n\n    Returns:\n        The HTML anchors (without '#'), or an empty tuple if this item doesn't have an anchor.\n    \"\"\"\n    # TODO: remove this at some point\n    try:\n        return (self.get_anchor(data),)  # type: ignore\n    except AttributeError:\n        return ()\n</code></pre>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.BaseRenderer.get_headings","title":"<code>get_headings()</code>","text":"<p>Return and clear the headings gathered so far.</p> <p>Returns:</p> Type Description <code>Sequence[Element]</code> <p>A list of HTML elements.</p> Source code in <code>mkdocstrings/handlers/base.py</code> <pre><code>def get_headings(self) -&gt; Sequence[Element]:\n\"\"\"Return and clear the headings gathered so far.\n\n    Returns:\n        A list of HTML elements.\n    \"\"\"\n    result = list(self._headings)\n    self._headings.clear()\n    return result\n</code></pre>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.BaseRenderer.get_templates_dir","title":"<code>get_templates_dir(handler)</code>","text":"<p>Return the path to the handler's templates directory.</p> <p>Override to customize how the templates directory is found.</p> <p>Parameters:</p> Name Type Description Default <code>handler</code> <code>str</code> <p>The name of the handler to get the templates directory of.</p> required <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>When the templates directory cannot be found.</p> <p>Returns:</p> Type Description <code>Path</code> <p>The templates directory path.</p> Source code in <code>mkdocstrings/handlers/base.py</code> <pre><code>def get_templates_dir(self, handler: str) -&gt; Path:\n\"\"\"Return the path to the handler's templates directory.\n\n    Override to customize how the templates directory is found.\n\n    Arguments:\n        handler: The name of the handler to get the templates directory of.\n\n    Raises:\n        FileNotFoundError: When the templates directory cannot be found.\n\n    Returns:\n        The templates directory path.\n    \"\"\"\n    # Templates can be found in 2 different logical locations:\n    # - in mkdocstrings_handlers/HANDLER/templates: our new migration target\n    # - in mkdocstrings/templates/HANDLER: current situation, this should be avoided\n    # These two other locations are forbidden:\n    # - in mkdocstrings_handlers/templates/HANDLER: sub-namespace packages are too annoying to deal with\n    # - in mkdocstrings/handlers/HANDLER/templates: not currently supported,\n    #   and mkdocstrings will stop being a namespace\n\n    with suppress(ModuleNotFoundError):  # TODO: catch at some point to warn about missing handlers\n        import mkdocstrings_handlers\n\n        for path in mkdocstrings_handlers.__path__:  # noqa: WPS609\n            theme_path = Path(path, handler, \"templates\")\n            if theme_path.exists():\n                return theme_path\n\n    # TODO: remove import and loop at some point,\n    # as mkdocstrings will stop being a namespace package\n    import mkdocstrings\n\n    for path in mkdocstrings.__path__:  # noqa: WPS609,WPS440\n        theme_path = Path(path, \"templates\", handler)\n        if theme_path.exists():\n            if handler != \"python\":\n                warnings.warn(\n                    \"Exposing templates in the mkdocstrings.templates namespace is deprecated. \"\n                    \"Put them in a templates folder inside your handler package instead.\",\n                    DeprecationWarning,\n                )\n            return theme_path\n\n    raise FileNotFoundError(f\"Can't find 'templates' folder for handler '{handler}'\")\n</code></pre>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.BaseRenderer.render","title":"<code>render(data, config)</code>","text":"<p>Render a template using provided data and configuration options.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>CollectorItem</code> <p>The collected data to render.</p> required <code>config</code> <code>Mapping[str, Any]</code> <p>The handler's configuraton options.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The rendered template as HTML.</p> Source code in <code>mkdocstrings/handlers/base.py</code> <pre><code>def render(self, data: CollectorItem, config: Mapping[str, Any]) -&gt; str:\n\"\"\"Render a template using provided data and configuration options.\n\n    Arguments:\n        data: The collected data to render.\n        config: The handler's configuraton options.\n\n    Returns:\n        The rendered template as HTML.\n    \"\"\"  # noqa: DAR202,DAR401\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.BaseRenderer.update_env","title":"<code>update_env(md, config)</code>","text":"<p>Update the Jinja environment.</p> <p>Parameters:</p> Name Type Description Default <code>md</code> <code>Markdown</code> <p>The Markdown instance. Useful to add functions able to convert Markdown into the environment filters.</p> required <code>config</code> <code>dict</code> <p>Configuration options for <code>mkdocs</code> and <code>mkdocstrings</code>, read from <code>mkdocs.yml</code>. See the source code of mkdocstrings.plugin.MkdocstringsPlugin.on_config to see what's in this dictionary.</p> required Source code in <code>mkdocstrings/handlers/base.py</code> <pre><code>def update_env(self, md: Markdown, config: dict) -&gt; None:  # noqa: W0613 (unused argument 'config')\n\"\"\"Update the Jinja environment.\n\n    Arguments:\n        md: The Markdown instance. Useful to add functions able to convert Markdown into the environment filters.\n        config: Configuration options for `mkdocs` and `mkdocstrings`, read from `mkdocs.yml`. See the source code\n            of [mkdocstrings.plugin.MkdocstringsPlugin.on_config][] to see what's in this dictionary.\n    \"\"\"\n    self._md = md\n    self.env.filters[\"highlight\"] = Highlighter(md).highlight\n    self.env.filters[\"convert_markdown\"] = self.do_convert_markdown\n    self.env.filters[\"heading\"] = self.do_heading\n</code></pre>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.CollectionError","title":"<code>CollectionError</code>","text":"<p>         Bases: <code>Exception</code></p> <p>An exception raised when some collection of data failed.</p>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.Handlers","title":"<code>Handlers(config)</code>","text":"<p>A collection of handlers.</p> <p>Do not instantiate this directly. The plugin will keep one instance of this for the purpose of caching. Use mkdocstrings.plugin.MkdocstringsPlugin.get_handler for convenient access.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>dict</code> <p>Configuration options for <code>mkdocs</code> and <code>mkdocstrings</code>, read from <code>mkdocs.yml</code>. See the source code of mkdocstrings.plugin.MkdocstringsPlugin.on_config to see what's in this dictionary.</p> required Source code in <code>mkdocstrings/handlers/base.py</code> <pre><code>def __init__(self, config: dict) -&gt; None:\n\"\"\"Initialize the object.\n\n    Arguments:\n        config: Configuration options for `mkdocs` and `mkdocstrings`, read from `mkdocs.yml`. See the source code\n            of [mkdocstrings.plugin.MkdocstringsPlugin.on_config][] to see what's in this dictionary.\n    \"\"\"\n    self._config = config\n    self._handlers: Dict[str, BaseHandler] = {}\n    self.inventory: Inventory = Inventory(project=self._config[\"site_name\"])\n</code></pre>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.Handlers.seen_handlers","title":"<code>seen_handlers: Iterable[BaseHandler]</code>  <code>property</code>","text":"<p>Get the handlers that were encountered so far throughout the build.</p> <p>Returns:</p> Type Description <code>Iterable[BaseHandler]</code> <p>An iterable of instances of <code>BaseHandler</code></p> <code>Iterable[BaseHandler]</code> <p>(usable only to loop through it).</p>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.Handlers.get_anchors","title":"<code>get_anchors(identifier)</code>","text":"<p>Return the canonical HTML anchor for the identifier, if any of the seen handlers can collect it.</p> <p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>The identifier (one that collect can accept).</p> required <p>Returns:</p> Type Description <code>Sequence[str]</code> <p>A tuple of strings - anchors without '#', or an empty tuple if there isn't any identifier familiar with it.</p> Source code in <code>mkdocstrings/handlers/base.py</code> <pre><code>def get_anchors(self, identifier: str) -&gt; Sequence[str]:\n\"\"\"Return the canonical HTML anchor for the identifier, if any of the seen handlers can collect it.\n\n    Arguments:\n        identifier: The identifier (one that [collect][mkdocstrings.handlers.base.BaseCollector.collect] can accept).\n\n    Returns:\n        A tuple of strings - anchors without '#', or an empty tuple if there isn't any identifier familiar with it.\n    \"\"\"\n    for handler in self._handlers.values():\n        fallback_config = getattr(handler, \"fallback_config\", {})\n        try:\n            anchors = handler.get_anchors(handler.collect(identifier, fallback_config))\n        except CollectionError:\n            continue\n        if anchors:\n            return anchors\n    return ()\n</code></pre>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.Handlers.get_handler","title":"<code>get_handler(name, handler_config=None)</code>","text":"<p>Get a handler thanks to its name.</p> <p>This function dynamically imports a module named \"mkdocstrings.handlers.NAME\", calls its <code>get_handler</code> method to get an instance of a handler, and caches it in dictionary. It means that during one run (for each reload when serving, or once when building), a handler is instantiated only once, and reused for each \"autodoc\" instruction asking for it.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the handler. Really, it's the name of the Python module holding it.</p> required <code>handler_config</code> <code>Optional[dict]</code> <p>Configuration passed to the handler.</p> <code>None</code> <p>Returns:</p> Type Description <code>BaseHandler</code> <p>An instance of a subclass of <code>BaseHandler</code>,</p> <code>BaseHandler</code> <p>as instantiated by the <code>get_handler</code> method of the handler's module.</p> Source code in <code>mkdocstrings/handlers/base.py</code> <pre><code>def get_handler(self, name: str, handler_config: Optional[dict] = None) -&gt; BaseHandler:\n\"\"\"Get a handler thanks to its name.\n\n    This function dynamically imports a module named \"mkdocstrings.handlers.NAME\", calls its\n    `get_handler` method to get an instance of a handler, and caches it in dictionary.\n    It means that during one run (for each reload when serving, or once when building),\n    a handler is instantiated only once, and reused for each \"autodoc\" instruction asking for it.\n\n    Arguments:\n        name: The name of the handler. Really, it's the name of the Python module holding it.\n        handler_config: Configuration passed to the handler.\n\n    Returns:\n        An instance of a subclass of [`BaseHandler`][mkdocstrings.handlers.base.BaseHandler],\n        as instantiated by the `get_handler` method of the handler's module.\n    \"\"\"\n    if name not in self._handlers:\n        if handler_config is None:\n            handler_config = self.get_handler_config(name)\n        try:\n            module = importlib.import_module(f\"mkdocstrings_handlers.{name}\")\n        except ModuleNotFoundError:\n            module = importlib.import_module(f\"mkdocstrings.handlers.{name}\")\n            if name != \"python\":\n                warnings.warn(\n                    DeprecationWarning(\n                        \"Using the mkdocstrings.handlers namespace is deprecated. \"\n                        \"Handlers must now use the mkdocstrings_handlers namespace.\"\n                    )\n                )\n        self._handlers[name] = module.get_handler(\n            theme=self._config[\"theme_name\"],\n            custom_templates=self._config[\"mkdocstrings\"][\"custom_templates\"],\n            config_file_path=self._config[\"config_file_path\"],\n            **handler_config,\n        )\n    return self._handlers[name]\n</code></pre>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.Handlers.get_handler_config","title":"<code>get_handler_config(name)</code>","text":"<p>Return the global configuration of the given handler.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the handler to get the global configuration of.</p> required <p>Returns:</p> Type Description <code>dict</code> <p>The global configuration of the given handler. It can be an empty dictionary.</p> Source code in <code>mkdocstrings/handlers/base.py</code> <pre><code>def get_handler_config(self, name: str) -&gt; dict:\n\"\"\"Return the global configuration of the given handler.\n\n    Arguments:\n        name: The name of the handler to get the global configuration of.\n\n    Returns:\n        The global configuration of the given handler. It can be an empty dictionary.\n    \"\"\"\n    handlers = self._config[\"mkdocstrings\"].get(\"handlers\", {})\n    if handlers:\n        return handlers.get(name, {})\n    return {}\n</code></pre>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.Handlers.get_handler_name","title":"<code>get_handler_name(config)</code>","text":"<p>Return the handler name defined in an \"autodoc\" instruction YAML configuration, or the global default handler.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>dict</code> <p>A configuration dictionary, obtained from YAML below the \"autodoc\" instruction.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The name of the handler to use.</p> Source code in <code>mkdocstrings/handlers/base.py</code> <pre><code>def get_handler_name(self, config: dict) -&gt; str:\n\"\"\"Return the handler name defined in an \"autodoc\" instruction YAML configuration, or the global default handler.\n\n    Arguments:\n        config: A configuration dictionary, obtained from YAML below the \"autodoc\" instruction.\n\n    Returns:\n        The name of the handler to use.\n    \"\"\"\n    global_config = self._config[\"mkdocstrings\"]\n    if \"handler\" in config:\n        return config[\"handler\"]\n    return global_config[\"default_handler\"]\n</code></pre>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.Handlers.teardown","title":"<code>teardown()</code>","text":"<p>Teardown all cached handlers and clear the cache.</p> Source code in <code>mkdocstrings/handlers/base.py</code> <pre><code>def teardown(self) -&gt; None:\n\"\"\"Teardown all cached handlers and clear the cache.\"\"\"\n    for handler in self.seen_handlers:\n        handler.teardown()\n    self._handlers.clear()\n</code></pre>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.ThemeNotSupported","title":"<code>ThemeNotSupported</code>","text":"<p>         Bases: <code>Exception</code></p> <p>An exception raised to tell a theme is not supported.</p>"},{"location":"reference/handlers/base/#mkdocstrings.handlers.base.do_any","title":"<code>do_any(seq, attribute=None)</code>","text":"<p>Check if at least one of the item in the sequence evaluates to true.</p> <p>The <code>any</code> builtin as a filter for Jinja templates.</p> <p>Parameters:</p> Name Type Description Default <code>seq</code> <code>Sequence</code> <p>An iterable object.</p> required <code>attribute</code> <code>str | None</code> <p>The attribute name to use on each object of the iterable.</p> <code>None</code> <p>Returns:</p> Type Description <code>bool</code> <p>A boolean telling if any object of the iterable evaluated to True.</p> Source code in <code>mkdocstrings/handlers/base.py</code> <pre><code>def do_any(seq: Sequence, attribute: str | None = None) -&gt; bool:\n\"\"\"Check if at least one of the item in the sequence evaluates to true.\n\n    The `any` builtin as a filter for Jinja templates.\n\n    Arguments:\n        seq: An iterable object.\n        attribute: The attribute name to use on each object of the iterable.\n\n    Returns:\n        A boolean telling if any object of the iterable evaluated to True.\n    \"\"\"\n    if attribute is None:\n        return any(seq)\n    return any(_[attribute] for _ in seq)\n</code></pre>"},{"location":"reference/handlers/rendering/","title":"rendering","text":"<p>This module holds helpers responsible for augmentations to the Markdown sub-documents produced by handlers.</p>"},{"location":"reference/handlers/rendering/#mkdocstrings.handlers.rendering.HeadingShiftingTreeprocessor","title":"<code>HeadingShiftingTreeprocessor(md, shift_by)</code>","text":"<p>         Bases: <code>Treeprocessor</code></p> <p>Shift levels of all Markdown headings according to the configured base level.</p> <p>Parameters:</p> Name Type Description Default <code>md</code> <code>Markdown</code> <p>A <code>markdown.Markdown</code> instance.</p> required <code>shift_by</code> <code>int</code> <p>The number of heading \"levels\" to add to every heading.</p> required Source code in <code>mkdocstrings/handlers/rendering.py</code> <pre><code>def __init__(self, md: Markdown, shift_by: int):\n\"\"\"Initialize the object.\n\n    Arguments:\n        md: A `markdown.Markdown` instance.\n        shift_by: The number of heading \"levels\" to add to every heading.\n    \"\"\"\n    super().__init__(md)\n    self.shift_by = shift_by\n</code></pre>"},{"location":"reference/handlers/rendering/#mkdocstrings.handlers.rendering.Highlighter","title":"<code>Highlighter(md)</code>","text":"<p>         Bases: <code>Highlight</code></p> <p>Code highlighter that tries to match the Markdown configuration.</p> <p>Picking up the global config and defaults works only if you use the <code>codehilite</code> or <code>pymdownx.highlight</code> (recommended) Markdown extension.</p> <ul> <li> <p>If you use <code>pymdownx.highlight</code>, highlighting settings are picked up from it, and the     default CSS class is <code>.highlight</code>. This also means the default of <code>guess_lang: false</code>.</p> </li> <li> <p>Otherwise, if you use the <code>codehilite</code> extension, settings are picked up from it, and the     default CSS class is <code>.codehilite</code>. Also consider setting <code>guess_lang: false</code>.</p> </li> <li> <p>If neither are added to <code>markdown_extensions</code>, highlighting is enabled anyway. This is for     backwards compatibility. If you really want to disable highlighting even in mkdocstrings,     add one of these extensions anyway and set <code>use_pygments: false</code>.</p> </li> </ul> <p>The underlying implementation is <code>pymdownx.highlight</code> regardless.</p> <p>Parameters:</p> Name Type Description Default <code>md</code> <code>Markdown</code> <p>The Markdown instance to read configs from.</p> required Source code in <code>mkdocstrings/handlers/rendering.py</code> <pre><code>def __init__(self, md: Markdown):\n\"\"\"Configure to match a `markdown.Markdown` instance.\n\n    Arguments:\n        md: The Markdown instance to read configs from.\n    \"\"\"\n    config: Dict[str, Any] = {}\n    for ext in md.registeredExtensions:\n        if isinstance(ext, HighlightExtension) and (ext.enabled or not config):\n            config = ext.getConfigs()\n            break  # This one takes priority, no need to continue looking\n        if isinstance(ext, CodeHiliteExtension) and not config:\n            config = ext.getConfigs()\n            config[\"language_prefix\"] = config[\"lang_prefix\"]\n    self._css_class = config.pop(\"css_class\", \"highlight\")\n    super().__init__(**{name: opt for name, opt in config.items() if name in self._highlight_config_keys})\n</code></pre>"},{"location":"reference/handlers/rendering/#mkdocstrings.handlers.rendering.Highlighter.highlight","title":"<code>highlight(src, language=None, *, inline=False, dedent=True, linenums=None, **kwargs)</code>","text":"<p>Highlight a code-snippet.</p> <p>Parameters:</p> Name Type Description Default <code>src</code> <code>str</code> <p>The code to highlight.</p> required <code>language</code> <code>Optional[str]</code> <p>Explicitly tell what language to use for highlighting.</p> <code>None</code> <code>inline</code> <code>bool</code> <p>Whether to highlight as inline.</p> <code>False</code> <code>dedent</code> <code>bool</code> <p>Whether to dedent the code before highlighting it or not.</p> <code>True</code> <code>linenums</code> <code>Optional[bool]</code> <p>Whether to add line numbers in the result.</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Pass on to <code>pymdownx.highlight.Highlight.highlight</code>.</p> <code>{}</code> <p>Returns:</p> Type Description <code>str</code> <p>The highlighted code as HTML text, marked safe (not escaped for HTML).</p> Source code in <code>mkdocstrings/handlers/rendering.py</code> <pre><code>def highlight(  # noqa: W0221 (intentionally different params, we're extending the functionality)\n    self,\n    src: str,\n    language: Optional[str] = None,\n    *,\n    inline: bool = False,\n    dedent: bool = True,\n    linenums: Optional[bool] = None,\n    **kwargs: Any,\n) -&gt; str:\n\"\"\"Highlight a code-snippet.\n\n    Arguments:\n        src: The code to highlight.\n        language: Explicitly tell what language to use for highlighting.\n        inline: Whether to highlight as inline.\n        dedent: Whether to dedent the code before highlighting it or not.\n        linenums: Whether to add line numbers in the result.\n        **kwargs: Pass on to `pymdownx.highlight.Highlight.highlight`.\n\n    Returns:\n        The highlighted code as HTML text, marked safe (not escaped for HTML).\n    \"\"\"\n    if isinstance(src, Markup):\n        src = src.unescape()\n    if dedent:\n        src = textwrap.dedent(src)\n\n    kwargs.setdefault(\"css_class\", self._css_class)\n    old_linenums = self.linenums  # type: ignore\n    if linenums is not None:\n        self.linenums = linenums\n    try:\n        result = super().highlight(src, language, inline=inline, **kwargs)\n    finally:\n        self.linenums = old_linenums\n\n    if inline:\n        return Markup(f'&lt;code class=\"{kwargs[\"css_class\"]} language-{language}\"&gt;{result.text}&lt;/code&gt;')\n    return Markup(result)\n</code></pre>"},{"location":"reference/handlers/rendering/#mkdocstrings.handlers.rendering.IdPrependingTreeprocessor","title":"<code>IdPrependingTreeprocessor(md, id_prefix)</code>","text":"<p>         Bases: <code>Treeprocessor</code></p> <p>Prepend the configured prefix to IDs of all HTML elements.</p> <p>Parameters:</p> Name Type Description Default <code>md</code> <code>Markdown</code> <p>A <code>markdown.Markdown</code> instance.</p> required <code>id_prefix</code> <code>str</code> <p>The prefix to add to every ID. It is prepended without any separator.</p> required Source code in <code>mkdocstrings/handlers/rendering.py</code> <pre><code>def __init__(self, md: Markdown, id_prefix: str):\n\"\"\"Initialize the object.\n\n    Arguments:\n        md: A `markdown.Markdown` instance.\n        id_prefix: The prefix to add to every ID. It is prepended without any separator.\n    \"\"\"\n    super().__init__(md)\n    self.id_prefix = id_prefix\n</code></pre>"},{"location":"reference/handlers/rendering/#mkdocstrings.handlers.rendering.MkdocstringsInnerExtension","title":"<code>MkdocstringsInnerExtension(headings)</code>","text":"<p>         Bases: <code>Extension</code></p> <p>Extension that should always be added to Markdown sub-documents that handlers request (and only them).</p> <p>Parameters:</p> Name Type Description Default <code>headings</code> <code>List[Element]</code> <p>A list that will be populated with all HTML heading elements encountered in the document.</p> required Source code in <code>mkdocstrings/handlers/rendering.py</code> <pre><code>def __init__(self, headings: List[Element]):\n\"\"\"Initialize the object.\n\n    Arguments:\n        headings: A list that will be populated with all HTML heading elements encountered in the document.\n    \"\"\"\n    super().__init__()\n    self.headings = headings\n</code></pre>"},{"location":"reference/handlers/rendering/#mkdocstrings.handlers.rendering.MkdocstringsInnerExtension.extendMarkdown","title":"<code>extendMarkdown(md)</code>","text":"<p>Register the extension.</p> <p>Parameters:</p> Name Type Description Default <code>md</code> <code>Markdown</code> <p>A <code>markdown.Markdown</code> instance.</p> required Source code in <code>mkdocstrings/handlers/rendering.py</code> <pre><code>def extendMarkdown(self, md: Markdown) -&gt; None:  # noqa: N802 (casing: parent method's name)\n\"\"\"Register the extension.\n\n    Arguments:\n        md: A `markdown.Markdown` instance.\n    \"\"\"\n    md.registerExtension(self)\n    md.treeprocessors.register(\n        HeadingShiftingTreeprocessor(md, 0),\n        HeadingShiftingTreeprocessor.name,\n        priority=12,\n    )\n    md.treeprocessors.register(\n        IdPrependingTreeprocessor(md, \"\"),\n        IdPrependingTreeprocessor.name,\n        priority=4,  # Right after 'toc' (needed because that extension adds ids to headers).\n    )\n    md.treeprocessors.register(\n        _HeadingReportingTreeprocessor(md, self.headings),\n        _HeadingReportingTreeprocessor.name,\n        priority=1,  # Close to the end.\n    )\n    md.treeprocessors.register(\n        ParagraphStrippingTreeprocessor(md),\n        ParagraphStrippingTreeprocessor.name,\n        priority=0.99,  # Close to the end.\n    )\n</code></pre>"},{"location":"reference/handlers/rendering/#mkdocstrings.handlers.rendering.ParagraphStrippingTreeprocessor","title":"<code>ParagraphStrippingTreeprocessor</code>","text":"<p>         Bases: <code>Treeprocessor</code></p> <p>Unwraps the <p> element around the whole output.</p>"},{"location":"coverage/","title":"Coverage report","text":""}]}